[{"path":"https://billingtt.github.io/acledR/articles/acled_api.html","id":"access-to-the-api","dir":"Articles","previous_headings":"","what":"Access to the API","title":"Accessing and Utilizing ACLED's API","text":"order use ACLED API, must first register account ACLED’s Access Portal. can pass account information R use acled_api() function. information includes email access key associated ACLED account. acquired credentials (email key), can either use acled_access() verify credentials correct (note counts one download quota) store environment given session, manually store environment file use permanently across every session. use acled_access() (recommended), run following: Alternatively, manually store environmental variable, run: open .Renviron file. , set: save file. run Sys.getenv(\"email_address\"), associated email print; run Sys.getenv(\"acled_key\"), ACLED key print console.","code":"acled_access(\"your_email\", \"your_key\") # to be run every session before doing an API call. file.edit(file.path(\"~\", \".Renviron\")) Sys.setenv(email_address = \"your_email\") Sys.setenv(acled_key = \"your_key\")"},{"path":"https://billingtt.github.io/acledR/articles/acled_api.html","id":"acled-api","dir":"Articles","previous_headings":"","what":"Acled API","title":"Accessing and Utilizing ACLED's API","text":"acled_api() wrapper request process ACLED API calls. function takes following parameters:","code":"acled_api(email = NULL,           key = NULL,           countries = NULL,           regions = NULL,           start_date = \"1997-01-01\",           end_date = Sys.Date(),           timestamp = NULL,           event_types = NULL,           monadic = FALSE,           ...,           acled_access = TRUE,#acled_access=TRUE only works when acled_access() was run beforehand, eliminating the need of email-key in acled_api()           prompt = TRUE)"},{"path":"https://billingtt.github.io/acledR/articles/acled_api.html","id":"parameters-for-the-api","dir":"Articles","previous_headings":"","what":"Parameters for the API","title":"Accessing and Utilizing ACLED's API","text":"countries regions parameters specify world pull data . NULL (default), API return data countries available. Specific countries may requested via vector country names. Similarly, entire regions may requested via vector region names numeric codes. acledR::acled_countries acledR::acled_regions shows full lists countries regions available. specify countries regions, call return cases fit arguments. example, request countries = c(\"Nigeria\", \"Mexico\") regions = c(\"Western Africa\"), Nigeria returned since Mexico Western Africa. start_date end_date parameters specify time period requested “yyyy-mm-dd” format. timestamp users can keep data sets updated, allows indicate time stamp collect events. timestamp event_date, time stamp indicates event added/modified ACLED’s data set. learn keep data sets date, please visit guide. Users can also use event_types specify event type interested . , users required enter event type interest string. example event_types = \"battles\". monadic logical parameter, FALSE default returns dyadic version data . set TRUE, monadic version based actor 1 actor 2 returned. ... parameter stands arguments one like include final query, ISO interaction. utilize arguments included function parameters, write “&paramenter=value”, example: “&iso=4” (NOTE: space characters). learn valid parameters please visit API guide. acled_access parameter used let function know used acled_access current session, thus, avoiding need include email key function. acled_access set FALSE, email key arguments necessary. Finally, prompt argument corresponds function handles big calls, whether user interested receiving interactive prompt includes, among information, API call split 1 call, user wants . cases users may want interactive prompt, users utilizing function part routine script, users can set prompt = FALSE run function without need interactive prompt.","code":""},{"path":"https://billingtt.github.io/acledR/articles/acled_api.html","id":"handling-big-api-calls","dir":"Articles","previous_headings":"","what":"Handling big API calls","title":"Accessing and Utilizing ACLED's API","text":"common across APIs, handling big data requires particular tweaks. case, base API offers possibility utilizing pagination address issues, process can confusing newer users working APIs, making big pulls data often unreliable - recommend smaller calls. However, package provide solution issues. First, terms pagination, wrapper user automatically, need include pagination calls. Second, terms big calls, acled_api() function first evaluate approximately much data user requesting, , user prompted message includes: number countries requested, number country-days, number API calls needed, question whether user like proceed. Currently, acled_api() works threshold 300,000 country-days determine whether split function. way users can rest assured call hit issues large (problem users encountered ), also, users now control calls make relation API quota. users prefer skip interactive prompt, can using argument prompt = FALSE. ignores interactive prompt, call still split reaches threshold.","code":""},{"path":"https://billingtt.github.io/acledR/articles/acled_api.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Accessing and Utilizing ACLED's API","text":"see works practice, show example gathering events Brazil January 2022 present. results return tibble ACLED event Brazil time period: instead wanted multiple countries, execute: entire region, omit countries parameter supply regions argument. Additionally, gathering protests provide event_type argument: include time stamps download data, add either string (“yyyy-mm-dd”) numeric Unix time stamp: like include one type interaction, case “Rioters versus Civilians” = 57, add interaction code extra argument: also request monadic version data based actor 1 actor 2 setting monadic = TRUE: dyadic monadic versions, API returns 138 unique events. However, number unique entries dyadic version also 138, ’s 36883 monadic version.","code":"library(acledR) library(dplyr)  acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. #> $Success #> [1] \"Authorisation accepted\"  df_br <- acled_api(countries = c(\"Brazil\"),                    start_date = \"2022-01-01\",                    end_date = Sys.Date(),                    monadic = F,                    acled_access = TRUE) df_br %>%    glimpse() #> Rows: 10,795 #> Columns: 31 #> $ data_id          <dbl> 9632161, 9632171, 9632172, 9632173, 9632174, 9632211,… #> $ iso              <dbl> 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 7… #> $ event_id_cnty    <chr> \"BRA60679\", \"BRA60689\", \"BRA60665\", \"BRA60659\", \"BRA6… #> $ event_id_no_cnty <dbl> 60679, 60689, 60665, 60659, 60673, 60694, 60684, 6069… #> $ event_date       <date> 2022-11-04, 2022-11-04, 2022-11-04, 2022-11-04, 2022… #> $ year             <dbl> 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,… #> $ time_precision   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,… #> $ event_type       <chr> \"Battles\", \"Protests\", \"Protests\", \"Protests\", \"Prote… #> $ sub_event_type   <chr> \"Armed clash\", \"Peaceful protest\", \"Peaceful protest\"… #> $ actor1           <chr> \"Unidentified Gang (Brazil)\", \"Protesters (Brazil)\", … #> $ assoc_actor_1    <chr> NA, \"PL: Liberal Party\", \"PL: Liberal Party\", \"PL: Li… #> $ inter1           <dbl> 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 3, 6, 5,… #> $ actor2           <chr> \"Unidentified Gang (Brazil)\", NA, NA, NA, NA, NA, NA,… #> $ assoc_actor_2    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ inter2           <dbl> 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0,… #> $ interaction      <dbl> 33, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 6… #> $ region           <chr> \"South America\", \"South America\", \"South America\", \"S… #> $ country          <chr> \"Brazil\", \"Brazil\", \"Brazil\", \"Brazil\", \"Brazil\", \"Br… #> $ admin1           <chr> \"Piaui\", \"Rondonia\", \"Mato Grosso\", \"Amazonas\", \"Para… #> $ admin2           <chr> \"Parnaiba\", \"Porto Velho\", \"Cuiaba\", \"Manaus\", \"Belem… #> $ admin3           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ location         <chr> \"Parnaiba\", \"Porto Velho\", \"Cuiaba\", \"Manaus\", \"Belem… #> $ latitude         <dbl> -2.9060, -8.7619, -15.5961, -3.1019, -1.4440, -21.952… #> $ longitude        <dbl> -41.7736, -63.9039, -56.0967, -60.0250, -48.4728, -51… #> $ geo_precision    <dbl> 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ source           <chr> \"Meio Norte; G1\", \"Agencia Brasil\", \"Agencia Brasil\",… #> $ source_scale     <chr> \"National\", \"National\", \"National\", \"National\", \"Nati… #> $ notes            <chr> \"On 4 November 2022, in Parnaiba (Piaui), a member of… #> $ fatalities       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ timestamp        <dbl> 1667956277, 1667956277, 1667956277, 1667956277, 16679… #> $ iso3             <chr> \"BRA\", \"BRA\", \"BRA\", \"BRA\", \"BRA\", \"BRA\", \"BRA\", \"BRA… df_br_co <- acled_api(countries = c(\"Brazil\", \"Colombia\"),                       start_date = \"2022-01-01\",                       end_date = Sys.Date(),                       monadic = F,                       acled_access = TRUE) df_sa <- acled_api(regions = c(\"South America\"),                    start_date = \"2022-01-01\",                    end_date = Sys.Date(),                    event_type = \"Protests\",                    monadic = F,                    acled_access = TRUE) df_br_co <- acled_api(countries = c(\"Brazil\", \"Colombia\"),                       start_date = \"2022-01-01\",                       end_date = Sys.Date(),                       monadic = F,                       # timestamp = \"2022-01-24\" -> in the case of string                       timestamp = 1643056974, # -> in the case of a numeric Unix timestamp                       acled_access = TRUE) df_sa <- acled_api(countries = c(\"Brazil\", \"Colombia\"),                    start_date = \"2022-01-01\",                    end_date = \"2022-04-30\",                    monadic = F,                    ... = \"&interaction=57\",                    acled_access = TRUE) df_sa_monadic <- acled_api(regions = c(\"South America\"),                            start_date = \"2022-01-01\",                            end_date = Sys.Date(),                            monadic = T,                            acled_access = TRUE)"},{"path":"https://billingtt.github.io/acledR/articles/acled_codebook.html","id":"acled-overview","dir":"Articles","previous_headings":"","what":"ACLED Overview","title":"ACLED Codebook","text":"ACLED project codes reported information type, agents, location, date, characteristics political violence events, demonstrations select politically relevant non-violent events. ACLED focuses tracking range violent non-violent actions political agents, including governments, rebels, militias, identity groups, political parties, external actors, rioters, protesters civilians. Political violence defined use force group political purpose motivation. ACLED records political violence constituent events, intent produce comprehensive overview forms political disorder, expressed violence demonstrations, within across states. politically violent event single altercation often force used one groups toward political end, although non-violent instances – including protests strategic developments – included dataset capture potential pre-cursors critical junctures violent conflict. fundamental unit observation ACLED event. Events involve designated actors – e.g. named rebel group, militia state forces. occur specific named location (identified name geographic coordinates) specific day.","code":""},{"path":[]},{"path":"https://billingtt.github.io/acledR/articles/acled_codebook.html","id":"acled-help","dir":"Articles","previous_headings":"ACLED Overview","what":"ACLED Help","title":"ACLED Codebook","text":"assist users understand column dataset represents, added function redirects users relevant documentation column question. function acled_help(): users can observe, function relatively straightforward, requiring one argument. case column refers column users may interested exploring . Note: acled_help() supports one column time. example, user like know fatalities column, //can write acled_help(column=\"fatalities\") prompt fatalities vignette. columns standalone documentation vignette, e.g. Fatalities. However, others either part another vignette, e.g. admins geographical vignette.","code":""},{"path":"https://billingtt.github.io/acledR/articles/acled_deletions_api.html","id":"the-deletions-api-and-how-to-keep-your-database-updated-","dir":"Articles","previous_headings":"","what":"The Deletions API and how to keep your database updated.","title":"Deletions API: Keeping your dataset up to date","text":"ACLED living dataset, means changes happen often. Three types changes recurrent ACLED’s dataset: weekly updates events, published new distinctive id (event_id_cnty column). cases required modifications published events, new information may appear. example, particular actor claimed responsibility attack, number fatalities changed. cases, event_id_cnty remains , new information updated week publication. (event January modified April, users request data April find modified January event) (check bit please) least common three, deletion events something also happens data set. comes new information may appear makes event longer fit scope ACLED’s data set, cases merge events avoid duplication new information rises. cases, event removed, well event_id_cnty. users personal ACLED file, appends/adds events regularly (e.g weekly monthly), need check events longer data set. Otherwise, Users risk outdated version dataset. satisfy need, users can use acled_deletion_api() function gather event_id_cnty deleted events. users can find example , kindly suggest visit guide .","code":""},{"path":"https://billingtt.github.io/acledR/articles/acled_deletions_api.html","id":"example","dir":"Articles","previous_headings":"The Deletions API and how to keep your database updated.","what":"Example","title":"Deletions API: Keeping your dataset up to date","text":"section show use acled_deletions_api() keep data sets updated. examples make following assumptions: 1. data sets saved .rda file. 2. don’t know data sets contains deleted data .","code":""},{"path":"https://billingtt.github.io/acledR/articles/acled_deletions_api.html","id":"dataset-n1","dir":"Articles","previous_headings":"The Deletions API and how to keep your database updated. > Example","what":"Dataset n°1","title":"Deletions API: Keeping your dataset up to date","text":"First lets load first dataset. can see dataset consists 326 rows 326 events. relatively smaller dataset data gathered 25th July 2022. Lets check deleted events since . Quite lot deleted events, 14326. Lets check part dataset. shown number rows (0), deleted events! … always important check. Lets go another example may lucky.","code":"library(acledR) library(dplyr)   acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials.  argen_dummy_acled_file <- acledR::acled_deletion_old_dummy # Here is our old personal ACLED dataset  nrow(argen_dummy_acled_file) acled_deleted_events <- acled_deletions_api(date_deleted = \"2022/07/25\")  glimpse(acled_deleted_events) my_deleted_events <- argen_dummy_acled_file %>%   filter(event_id_cnty %in% acled_deleted_events$event_id_cnty)  glimpse(my_deleted_events)"},{"path":"https://billingtt.github.io/acledR/articles/acled_deletions_api.html","id":"dataset-n2","dir":"Articles","previous_headings":"The Deletions API and how to keep your database updated. > Example","what":"Dataset n°2","title":"Deletions API: Keeping your dataset up to date","text":"Now lets load second dataset. loaded dataset, can see 143956 rows . Now proceed retrieve deleted events since last time gather data. can see 191 events removed since last time uploaded data (1st August 2022, around 1 month half time writing). Now know deleted events, lets check dataset. can see deleted events, excluded dplyr::filter() function. Now dataset 143905 rows, thus 51 events deleted.","code":"dummy_acled_file <- acledR::acled_deletion_old_dummy_n2 # Here is our personal ACLED dataset  nrow(dummy_acled_file) deleted_events <- acled_deletions_api(date_deleted = max(dummy_acled_file$timestamp)) # We are using the largest Unix timestamp as that is the last time we gathered data.   nrow(deleted_events) updated_dataset <- dummy_acled_file %>%   filter(!(event_id_cnty %in% deleted_events$event_id_cnty)) # We exclude every event_id_cnty that also appears in the deleted_events result  nrow(updated_dataset)"},{"path":"https://billingtt.github.io/acledR/articles/acled_rounding.html","id":"acled-rounding","dir":"Articles","previous_headings":"","what":"ACLED Rounding","title":"ACLED Rounding","text":"acled_rounding()utility function providing “intuitive” way rounding R, contrary base R`s “round even”. concept rounding even something may particularly useful statistics (discipline closely aligned origins R Language), however, can rather unintuative users want routine approach. acledR::acled_rounding() rather straight forward function, closely following structure base R’s round(): arguments acled_rounding() first number round (num) , number digits round towards (digits). digits equals 1, rounds tenths place (result = 0.1), 2 rounds hundredths place (result = 0.01), -1 rounds tens place (result = 10), -2 rounds hundred place (result = 100) . intutively, value means number digits next ..","code":"acled_rounding(num, digits = 0)"},{"path":"https://billingtt.github.io/acledR/articles/acled_rounding.html","id":"example---rounding-in-acledr-and-in-base-r","dir":"Articles","previous_headings":"","what":"Example - Rounding in acledR and in Base R","title":"ACLED Rounding","text":"put simply, formula performs simple task - round like round day--day interactions. , 2.5 -> 3 2.4 -> 2 2.7 -> 3 example highlights difference (note difference appears rounding number target digit equal 5): example can see base R rather inconsistent rounding. x1 round 10, rounded . x2 rounded 8, even last digit cases - 5. main issues acled_rounding() aims solve: base R rounds result’s whole number. round() consistent - , consistently rounds even. Lets now explore acled_rounding() approaches task: can see, acledR’s function deviates base R rounding last digit 5. differences can noted x2 x3, rounding last digit 5.","code":"library(acledR)  x1 <- 9.5 x2 <- 8.5 x3 <- 1.45  # First lets see how base R does it: round(x1) ## [1] 10 round(x2) ## [1] 8 round(x3, digits = 0) ## [1] 1 round(x3, digits = 1) ## [1] 1.4 acled_rounding(x1) ## [1] 10 acled_rounding(x2) ## [1] 9 acled_rounding(x3, digits = 0) ## [1] 1 acled_rounding(x3, digits = 1) ## [1] 1.5"},{"path":"https://billingtt.github.io/acledR/articles/acled_sources.html","id":"what-is-a-source-in-acled","dir":"Articles","previous_headings":"","what":"What is a source in ACLED?","title":"Sourcing in ACLED","text":"source ACLED often local partner (e.g. Kivu Security Tracker Congo), international media outlet (BBC News), local/regional media outlets (e.g. mediacongo.net Congo). However, see example , events sometimes include one source. ACLED hires researchers research managers adept knowledge regions, thus, acute understanding local sources, proposed included part ACLED’s source checklist. source checklist list sources researchers required monitor, sources often evaluated reliability, recurrence, validity.","code":""},{"path":"https://billingtt.github.io/acledR/articles/acled_sources.html","id":"what-does-acled-mean-by-source-scale","dir":"Articles","previous_headings":"","what":"What does ACLED mean by ‘Source scale’?","title":"Sourcing in ACLED","text":"Source scale refers scale relevant source operates . ACLED traditionally codes following scales source_scale column: Local Sub-national National Regional International Often times users can find source scale contain one mentioned categories delimited -. result event utilizing multiple sources vary across scope. However, users `source_scale`` column must remember source scale imply less legitimacy, accuracy direct information. important mention, still, ACLED supports gathering utilizing local sources, reflected numerous partnerships ACLED local organizations.","code":""},{"path":"https://billingtt.github.io/acledR/articles/acled_sources.html","id":"acledr-example","dir":"Articles","previous_headings":"","what":"acledR Example","title":"Sourcing in ACLED","text":"following example exploring use sources source scales data. following chunk retrieve data Georgia year 2021, explore composition sources dataset. Now data Georgia throughout 2021, like start exploring distribution sources source scale dataset. However, two important things note source, source_scale. delimiters cells lead multiple values one cell - often issue try operate directly values. Thus, able generate meaningful statistics , separate values pivot . Let’s sources column, sources delimited ; can see, three main sources Georgian dataset 2021 Rustavi 2, interpressnews, RFE/RL also known Radio Free Europe/Radio Liberty. can already gather information source used ACLED. Two three Georgian sources, lot content Georgian language, one (RFE/RL) international source coverage Georgia. emphasis local, national sometimes non-english reporting allows us avoid pitfalls english international coverage political violence outside traditionally western countries. See (need add clionah & roudabeh article) Now know sources, let’s explore scale . can see confirm saw , regions particular reliance national sources. precisely see Georgian data set, National sources used 73% data set, followed international sources 25%. Note represent 668 events exclusively national sources, 668 counts national sources. ACLED writes source scales, meant represent aggregated scales source columns. example: - source column 1 source national, 1 source international, source “national-international” - source column 2 national sources, 1 international, source “national-international”. Note national repeated twice (thus following number national sources) .","code":"library(acledR) library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. ## $Success ## [1] \"Authorisation accepted\" df_geo <- acled_api(countries = c(\"Georgia\"),                    start_date = \"2021-01-01\",                    end_date = \"2022-01-01\",                    monadic = F,                    acled_access = TRUE,                    prompt = F) ## Requesting data for 1 countries. Accounting for the requested time period and ACLED coverage dates, this request includes 365 country-days. ## Proceeding with 1 API calls ## Processing API request ## Extracting content from API request sources_df_geo <- df_geo %>%       tidyr::separate_rows(source, sep = \";\") %>%       mutate(source = stringr::str_trim(source,side = \"both\")) %>%       relocate(source,.before=\"source_scale\")   sources_df_geo %>%   group_by(source)%>%   tally() %>%   arrange(-n) ## # A tibble: 22 × 2 ##    source                            n ##    <chr>                         <int> ##  1 Rustavi 2                       172 ##  2 Interpressnews                  153 ##  3 RFE/RL                          147 ##  4 Mtavari Arkhi                    91 ##  5 Caucasian Knot                   77 ##  6 Agenda.ge                        68 ##  7 Imedinews.ge                     65 ##  8 Civil Georgia                    39 ##  9 Black Sea Press: News Georgia    35 ## 10 Netgazeti.ge                     25 ## # … with 12 more rows df_geo %>%     tidyr::separate_rows(source_scale, sep = \"-\") %>%     mutate(source_scale = stringr::str_trim(source_scale,side = \"both\")) %>%     relocate(source_scale,.after=\"source\") %>%     janitor::tabyl(source_scale) %>% # Summarize data groupped by time_precision     janitor::adorn_rounding(2) %>%     arrange(-n) ##   source_scale   n percent ##       National 668    0.73 ##  International 232    0.25 ##       Regional  15    0.02 ##    Subnational   1    0.00"},{"path":"https://billingtt.github.io/acledR/articles/actors_interactions.html","id":"actors","dir":"Articles","previous_headings":"","what":"Actors","title":"Actors and Interactions","text":"ACLED recognizes range actors including state forces, rebels, militias, identity groups, demonstrators, civilians, external forces. ACLED, politically violent actors include government forces affiliates, rebel groups, militias, external private forces (e.g. UN missions) political groups interact issues political authority (e.g. territorial control, government control, access resources, etc.). organised actors official name political purpose, use violence political means. inclusion agents political violence, organizations must cohesive assembled single events, exception riots protests. , events organizations must connected means achieve larger political purpose. necessary sufficient definition actors allows establishment campaigns trajectories movements. Protesters, rioters civilians actors whose inclusion deviates organization armed group rules. Rioters protesters involve spontaneous, atomic acts organization may, may , continue beyond discrete event. Civilians actively choose involved event. name actor noted actor1 actor2 columns dataset. assoc_actor_1 assoc_actor_2 columns record associated groups specific events well identity specific actors. former case, associated group may allies actions, like two armed organized groups engaging attacks common enemy. latter case, assoc_actor_1 assoc_actor_2 columns may record additional information concerning victims attack socio-political affiliation demonstrators ethno-religious identity civilian victim. ‘Explosions/Remote violence’ event intended armed, organized group, also affects civilians, groups noted – primary actor ostensibly intended target, civilians (collateral damage case) associated actor.","code":""},{"path":"https://billingtt.github.io/acledR/articles/actors_interactions.html","id":"interaction-codes","dir":"Articles","previous_headings":"","what":"Interaction Codes","title":"Actors and Interactions","text":"type group actor referred “interaction codes”. currently 8 categories actors, detailed table . type actor1 recorded inter1 column, inter2 codes type actor2. See complete ACLED Codebook details inter code named data.","code":""},{"path":"https://billingtt.github.io/acledR/articles/actors_interactions.html","id":"joined-interaction-codes","dir":"Articles","previous_headings":"","what":"Joined Interaction Codes","title":"Actors and Interactions","text":"joined interaction code combination two inter codes associated two main actors. Single actor type codes recorded inter1 inter2 columns, compounded number recorded interaction column. example, country’s military fights political militia group, respective inter1 inter2 codes “1” “3”, respectively, compounded interaction recorded “13”. Interaction numbers always smallest possible number (example, 37 instead 73), regardless order actor1 actor2. Interaction codes recorded events, including non-violent activity. one-sided events, empty second actor category coded “0”. non-violent rebel event occurs inter1 noted “2”, “20” coded interaction column. main actors recorded actor1 actor2 columns basis interaction codes.","code":""},{"path":"https://billingtt.github.io/acledR/articles/actors_interactions.html","id":"acledr-example","dir":"Articles","previous_headings":"","what":"acledR Example","title":"Actors and Interactions","text":"example actors interactions ACLED, let’s consider Yemen January 2022 using acled_api() function call API (read conflict Yemen ACLED’s Yemen Research Hub): month, length(df_yemen$data_id) ACLED events, length(unique(df_yemen$actor1)) unique actor1 entries, length(unique(df_yemen$actor2)) unique actor2 entries. common actor1 “Operation Restoring Hope”, accounting 50% events. can see “Operation Restoring Hope” coded inter1 = 8, indicating actor falls “External/Forces” category. common actor2 NA 43%, indicating actor2 coded events. next frequent actor2 Military Forces Yemen. Inspecting , see joined interaction column events coded “Sole Action”, mostly activity “Operation Restoring Hope”. Using sub_event_type column tandem actor1 column, see “Operation Restoring Hope” mostly conducted air/drone strikes period.","code":"library(acledR)  acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. #> $Success #> [1] \"Authorisation accepted\"  df_yemen <- acled_api(countries = c(\"Yemen\"),                       start_date = \"2022-01-01\",                       end_date = \"2022-01-31\",                       monadic = F,                       prompt = FALSE) # number of ACLED events df_yemen$event_id_cnty %>% length() #> [1] 895 # number of unique actor1s df_yemen$actor1 %>% unique() %>% length() #> [1] 28 # number of unique actor2s df_yemen$actor2 %>% unique() %>% length() #> [1] 24 df_yemen %>%    janitor::tabyl(actor1) %>%    janitor::adorn_rounding(2) %>%    arrange(-n) %>%    head(5) #>                                                      actor1   n percent #>                                    Operation Restoring Hope 460    0.51 #>  Military Forces of Yemen (2016-) Supreme Political Council 146    0.16 #>                                              Giants Brigade 115    0.13 #>                            Military Forces of Yemen (2012-)  70    0.08 #>                            Unidentified Armed Group (Yemen)  22    0.02 df_yemen %>%    filter(actor1 == \"Operation Restoring Hope\") %>%    pull(inter1) %>%    unique() #> [1] 8 df_yemen %>%    janitor::tabyl(actor2) %>%    select(-valid_percent) %>%    arrange(-n) %>%    head(5) #>                                                      actor2   n    percent #>                                                        <NA> 386 0.43128492 #>  Military Forces of Yemen (2016-) Supreme Political Council 301 0.33631285 #>                                           Civilians (Yemen) 110 0.12290503 #>                            Military Forces of Yemen (2012-)  29 0.03240223 #>                                              Giants Brigade  24 0.02681564 df_yemen %>%    janitor::tabyl(interaction) %>%    janitor::adorn_rounding(2) %>%    arrange(-n) %>%    head(5) #>  interaction   n percent #>           80 325    0.36 #>           13 154    0.17 #>           18 110    0.12 #>           11  95    0.11 #>           17  54    0.06  df_yemen %>%    filter(actor1 == \"Operation Restoring Hope\") %>%    janitor::tabyl(interaction) %>%    janitor::adorn_rounding(2) %>%   arrange(-n) %>%    head(5) #>  interaction   n percent #>           80 321    0.70 #>           18 103    0.22 #>           78  33    0.07 #>           38   3    0.01 #>                     sub_event_type   n percent #>                   Air/drone strike 439    0.95 #>  Shelling/artillery/missile attack  11    0.02 #>                             Attack   2    0.00 #>           Change to group/activity   2    0.00 #>              Disrupted weapons use   2    0.00"},{"path":[]},{"path":[]},{"path":"https://billingtt.github.io/acledR/articles/event_types.html","id":"battles","dir":"Articles","previous_headings":"Violent Events","what":"Battles:","title":"Event and Sub-Event Types","text":"ACLED defines battle “violent interaction two politically organized armed groups particular time location.” Battles can occur armed organised state, non-state, external groups, combination therein. fatality minimum necessary inclusion. Although term “battle” may used describe various kinds encounters parties – e.g. “ceasefire broken” – battles must violent events involving least two armed organized actors. One-sided interactions – e.g. reports shots fired air without target – categorized ‘Strategic developments’ (see ). Violence unarmed civilians categorized ‘Violence civilians’, although civilians can also harmed “collateral damage” ‘Battles’ ‘Explosions/Remote violence’ events. harmed event battle explosions, separate civilian-specific event recorded, fatalities, , aggregated “Fatalities” column. specific elements definition therefore follows: violent interaction exchange armed force, use armed force close distance, armed groups capable inflicting harm upon opposing side. Organized armed groups collective actors assumed operating cohesively around agenda, identity, political purpose, using weapons inflict harm. groups frequently designated name stated agenda. following sub-event types associated ‘Battles’ event type designated according outcome battle event: ‘Armed clash’, ‘Government regains territory’, ‘Non-state actor overtakes territory’. Armed clash: armed, organized groups engage battle, reports indicate change territorial control, correct sub-event type ‘Armed clash’. Non-state actor overtakes territory: non-state actor wins control /subdues government forces, /won territory can now act impunity regarded monopoly force within territory, ‘Non-state actor overtakes territory’ correct sub-event type. Short-lived territorial exchanges last one day coded ‘Armed clash’. cases government non-state forces fight many times location non-state group gains control, final territorial acquisition coded ‘Non-state actor overtakes territory’. battles location coded ‘Armed clash’. sub-event can also used note transfer control one non-state group another violence. Government regains territory: sub-event type used describe cases government forces affiliates fighting competing state forces non-state group regain control location. code used re-establishment government control dual non-state violence. Short-lived territorial exchanges last one day coded ‘Armed clash’.","code":""},{"path":"https://billingtt.github.io/acledR/articles/event_types.html","id":"explosionsremote-violence","dir":"Articles","previous_headings":"Violent Events","what":"Explosions/Remote violence:","title":"Event and Sub-Event Types","text":"ACLED defines ‘Explosions/Remote violence’ “one-sided violent events tool engaging conflict creates asymmetry taking away ability target respond”. tools used instances ‘Explosions/Remote violence’ explosive devices, including, limited , bombs, grenades, improvised explosive devices (IEDs), artillery fire shelling, missile attacks, heavy machine gun fire, air drone strikes, chemical weapons. Suicide attacks implicating use bombs also fall category. instance ‘Explosion/Remote violence’ reported context ongoing battle, merged coded single battle event. ‘Explosions/Remote violence’ can waged armed agents civilians. accounting attacks civilians, explosions/remote violence civilian targets included. following sub-event types associated ‘Explosions/Remote violence’ event type: ‘Chemical weapon’, ‘Air/drone strike’, ‘Suicide bomb’, ‘Shelling/artillery/missile attack’, ‘Remote explosive/landmine/IED’, ‘Grenade’. Chemical weapon: sub-event type coded whenever chemical weapons used warfare absence engagement. ACLED considers chemical weapons substances listed Schedule 1 Chemical Weapons Convention, including sarin gas, mustard gas, chlorine gas, anthrax. Napalm, white phosphorous, well tear gas non-lethal crowd control substances, considered chemical weapons within sub-event type. Air/drone strike: sub-event type coded whenever air drone strikes occurred absence engagement. Please note air--ground attacks fall sub-event type, including attacks helicopters involve exchange fire forces ground. Suicide bomb: sub-event type coded whenever suicide bombing occurs absence engagement (engagement include gun fire armed groups civilians). also includes suicide vehicle-borne improvised explosive device (SVBIED) attacks Shelling/artillery/missile attack: sub-event type coded whenever long-range artillery missile system used absence engagement. also includes attacks described shelling, use artillery either stand-alone tank based, mortars, guided missiles. Planes shot rockets artillery fall sub-event type; unmanned drones shot , however, given human targets, coded interception ‘Disrupted weapons use’ (see ). Similarly, planes shot using rockets artillery fall sub-event type, interception strike (Iron Dome Israel) coded ‘Disrupted weapons use’ well given human targeting. Rocket-propelled grenades (RPGs) coded ‘Shelling/artillery/missile attack’ sub-event type opposed ‘Grenade’ given similarities artillery. Remote explosive/landmine/IED: sub-event type coded whenever remotely- victim-activated devices detonated absence engagement. Examples include landmines, improvised explosive devices (IEDs) whether alone attached vehicle, sort remotely detonated triggered explosive. Unexploded ordinances (UXO) also fall category. Suicide vehicle-borne improvised explosive devices (SVBIED) coded ‘Suicide bomb’ (see ), safe defusal explosive accidental detonation actor planted (casualties reported) coded ‘Disrupted weapons use’ (see ). Grenade: sub-event type used grenade another explosive thrown absence engagement. Events involving “crude bombs” (Molotov cocktails, firecrackers, cherry bombs, petrol bombs, etc.) well ‘stun grenades’ coded category included either ‘Riots’ ‘Strategic developments’ depending context occurred.","code":""},{"path":"https://billingtt.github.io/acledR/articles/event_types.html","id":"violence-against-civilians","dir":"Articles","previous_headings":"Violent Events","what":"Violence against civilians:","title":"Event and Sub-Event Types","text":"ACLED defines ‘Violence civilians’ violent events organised armed group deliberately inflicts violence upon unarmed non-combatants. definition, civilians unarmed engage political violence. perpetrators acts include state forces affiliates, rebels, militias, external/forces. cases identity actions victims question (e.g. target may employed police officer), ACLED determines person harmed killed unarmed unable either act defensively counter-attack, act ‘Violence civilians’. minimum number civilian fatalities needed qualify ACLED event. ‘Violence civilians’ includes attempts inflicting harm (e.g. beating, shooting, torture, rape, mutilation, etc.) forcibly disappearing (e.g. kidnapping disappearances) civilian actors. following sub-event types associated ‘Violence civilians’ event type: ‘Sexual violence’, ‘Attack’, ‘Abduction/forced disappearance’. Sexual violence: sub-event type used individual (regardless gender) targeted sexual violence. ‘Sexual violence’ defined largely action inflicts harm sexual nature. means limited solely penetrative rape, also include actions like public stripping, sexual torture men, etc. Attack: sub-event type used civilians targeted violence organised armed actor. Attacks sexual nature coded ‘Sexual violence’. Abduction/Forced disappearance: sub-event type used actor engages abduction forced disappearance civilians, without reports violence. fatalities serious injuries reported consequence forced disappearance, event coded ‘Attack’ instead. Note sub-event type cover state-sanctioned arrests, unless reported conducted extra-judicially. contrast, non-state groups can never engage arrests, activity engaging “arresting” typically coded using sub-event type","code":""},{"path":[]},{"path":"https://billingtt.github.io/acledR/articles/event_types.html","id":"protests","dir":"Articles","previous_headings":"Demonstrations","what":"Protests:","title":"Event and Sub-Event Types","text":"protest defined public demonstration participants engage violence, though violence may used . Events include individuals groups peacefully demonstrate political entity, government institution, policy, group, tradition, businesses private institutions. Events coded protests symbolic public acts displays flags public prayers (unless accompanied demonstration), protests legislatures parliamentary walkouts MPs staying silent, strikes (unless accompanied demonstration), individual acts self-harm actions (e.g. individual immolations hunger strikes). Protesters noted generic terms (e.g. ‘Protesters (Country)’); representing group, name group recorded respective associated actor column. following sub-event types associated ‘Protests’ event type: ‘Peaceful protest’, ‘Protest intervention’, ‘Excessive force protesters’. Peaceful protest: sub-event type used demonstrators engaged protest engaging violence forms rioting behavior faced sort force engagement. Protest intervention: sub-event type used individuals engaged peaceful protest attempt disperse suppress protest without serious/lethal injuries reported targeting protesters lethal weapons. Additionally, sub-event type cover instance armed groups rioters interact peaceful protesters without resulting serious/lethal injuries. Excessive force protesters: sub-event type used individuals engaged peaceful protest targeted violence actor leading (lead ) serious/lethal injuries.","code":""},{"path":"https://billingtt.github.io/acledR/articles/event_types.html","id":"riots","dir":"Articles","previous_headings":"Demonstrations","what":"Riots:","title":"Event and Sub-Event Types","text":"‘Riots’ violent events demonstrators mobs engage disruptive acts, including limited rock throwing, property destruction, etc. may target individuals, property, businesses, rioting groups armed actors. Rioters noted generic terms (e.g. ‘Rioters (Country)’); representing group, name group recorded respective ‘Associated actor’ column. Rioters may begin peaceful protesters, may intent engaging spontaneous disorganized violence beginning actions. Contrary armed groups, rioters use sophisticated weapons guns, knives swords. “Crude bombs” (e.g. Molotov cocktails, petrol bombs, firecrackers) may used rioting behavior. following sub-event types associated ‘Riots’ event type: ‘Violent demonstration’ ‘Mob violence’. Violent demonstration: sub-event type used group individuals engages demonstration involving violence. Examples rioting behavior include vandalism; road-blocking using barricades, burning tires, material; types violent /destructive behavior also included . Mob violence: sub-event type used rioters violently interact rioters, another armed group civilians, outside demonstrations without use lethal weapons like guns, knives, swords, etc. mob defined “large crowd people, especially one disorderly intent causing trouble violence.” Note type violence can also include (unarmed crudely armed) vigilante mobs clashing armed groups attacking civilians. Vigilante groups crudely armed considered spontaneous mobs rather assumed organized hence included .","code":""},{"path":[]},{"path":"https://billingtt.github.io/acledR/articles/event_types.html","id":"strategic-developments","dir":"Articles","previous_headings":"Demonstrations > Non-Violent Actions","what":"Strategic Developments:","title":"Event and Sub-Event Types","text":"cases, ACLED also records events broadly categorized “non-violent” differ role inside context. events, coded “strategic Developments” important pieces context may connected future upticks violence, thus included data set provide better understanding given context disorder. Users free visit guide use strategic developments analysis find examples use event type. Strategic Developmets include: Agreements (e.g. Peace agreements / summits) Arrests (e.g. Politically sensitive arrests) Change measures/activity (e.g. mergers splinters violent groups, movement forces, recruitment force, particular security measures) Disrupted weapons use (e.g. Defuseing explosives, ‘ineffective’ detonations, interceptions weapon seizures) Headquarters base established Looting/property destruction (e.g. Land seizure, looting, property destruction) Non-violent transfer territory (e.g. mass graves, displacements, military takeovers, explosive remnants war like cluster bombs mines, elections/referendums)","code":""},{"path":"https://billingtt.github.io/acledR/articles/event_types.html","id":"acledr-example","dir":"Articles","previous_headings":"","what":"acledR Example","title":"Event and Sub-Event Types","text":"see event types sub-event types look practice, let’s pull data Haiti first months 2022 sing acled_api() function: quick data wrangling dplyr plotting ggplot2, see common event_type violence civilians.  Let’s investigate variation common event_type, violence civilians, breaking sub_event_type month.","code":"library(acledR)  acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. #> $Success #> [1] \"Authorisation accepted\"  df_haiti <- acled_api(countries = c(\"Haiti\"),                    start_date = \"2022-01-01\",                    end_date = \"2022-03-31\",                    monadic = F,                    prompt = FALSE) library(dplyr) library(ggplot2)  # event counts by event_type df_haiti %>%    group_by(event_type) %>%    tally() %>%       # start plotting   ggplot() +   geom_bar(aes(x = forcats::fct_reorder(event_type, n), y = n), # reorder bars by count            stat = \"identity\") +   theme_light() +   # flip the axes   coord_flip() +   # name the axes (opposite because coordinates were flipped)   labs(y = \"Events\", x =  \"Event Type\",        title = \"Event Types in Haiti\",        subtitle = \"January through March 2022\") df_haiti %>%    # filter to only violence against civilians   filter(event_type %in% c(\"Violence against civilians\")) %>%    # create an indicator for month   mutate(month = lubridate::month(event_date, label = T)) %>%    # create counts by sub_event_type-month   group_by(sub_event_type, month) %>%    tally() %>%       # start plotting   ggplot() +   geom_bar(aes(x = month, y = n, fill = sub_event_type),            stat = \"identity\") +   # fill palatte   scale_fill_viridis_d() +   theme_light() +   labs(y = \"Events\", x =  \"Month\",        title = \"Violence Against Civilians in Haiti\",        subtitle = \"January through March 2022\")"},{"path":"https://billingtt.github.io/acledR/articles/fatalities.html","id":"how-do-we-code-fatalities","dir":"Articles","previous_headings":"","what":"How do we code fatalities?","title":"Fatalities","text":"ACLED researchers triangulate event information across multiple sources, often combining information local media outlets well local partners. ACLED codes conservative fatality estimate available conflict event. Researchers identify reports fatalities rather casualties, casualties may also include injuries. researcher encounters report casualties deaths, ACLED codes event 0 fatalities. ACLED acknowledges approach may underestimate fatalities, consistent methodology provides confidence , precisely accurate cases, fatality estimates conservative therefore expected direction error known. less transparent fatality coding criteria, error associated fatality estimate may either high low. mentioned across ACLED’s methodology, rely media local partners’ reports code fatalities. , reports make mention fatalities, going coded. cases, however, sources may mention fatalities occurred without including actual number. cases occur - researchers unable find complementary information number fatalities - ACLED relies series rules provide estimation fatalities: significant attack, active war zone? yes, fatalities estimated 10. E.g. airstrike dropped building Yemen, resulting unspecified number fatalities. [Yemen war zone airstrike likely yield high casualties] attack limited scope, active war zone? yes, fatalities estimated 3. E.g. bomb explodes checkpoint Afghanistan, resulting deaths. [Afghanistan war zone, yet checkpoints often manned large numbers people] attack outside war zone? yes, fatalities estimated 3. E.g. Inter communal violence Guinea leads number deaths. [Guinea warzone, inter communal violence tends result mass fatalities] significant attack outside war zone? yes, fatalities estimated 10. E.g. large-scale attack Al Shabaab results unspecified number fatalities Kenya. [Kenya war zone, yet large-scale attack involving actor neighboring war zone] purpose, ACLED defines country war zone single group coalition attempting violently challenge legitimacy authority central government, actor active 20% territory - assessment done qualitatively. Conflict zones countries organized political violence, yet reach threshold war zone. Unrest refers protests riots occurring countries may much conflict occurring, yet unrest commonplace. Finally, disorder something affects every country ACLED coverage, refers political violence demonstration events.","code":""},{"path":"https://billingtt.github.io/acledR/articles/fatalities.html","id":"are-these-fatalities-measures-reliable","dir":"Articles","previous_headings":"","what":"Are these fatalities measures reliable?","title":"Fatalities","text":"mentioned , coding fatalities speaking estimations. Thus, always room new information appear change measure. cases, ACLED modifies events data set reflect new information. time, ACLED’s efforts provide conservative estimate gives additional layer reliability, measures included backed sources region.","code":""},{"path":"https://billingtt.github.io/acledR/articles/fatalities.html","id":"how-does-acled-deal-with-uncertainty","dir":"Articles","previous_headings":"","what":"How does ACLED deal with uncertainty?","title":"Fatalities","text":"reason refer fatalities estimates, always degree uncertainty. Tracking reporting fatalities active conflict zone events -going multi-faceted complicated issue, actors may opt report losses victims attacks, civilians may readily available report fatalities. Hence, simple increasing number sources used code fatalities, cases may enough, others may enough reliable sources given bias - bias either report report. order address short comings, ACLED develops regionally tailor-made approaches finding information given region. Contrary just increasing number sources (may just add even biases worsen quality information - quantity doesn’t ensure quality), ACLED aims generate particular source combinations reflect reality disorder fatalities counts space. Generally, ACLED prioritizes local sources’ reports, local partners sub national media, tend avoid sensationalization lethality often occurs English language media.","code":""},{"path":"https://billingtt.github.io/acledR/articles/fatalities.html","id":"acledr-example","dir":"Articles","previous_headings":"","what":"acledR Example:","title":"Fatalities","text":"order demonstrate use fatalities columns, look fatalities violence civilians across 2021 2022 (first half August). Lets now explore fatalities within data set. can see, fatalities part concentrated 0 1, average 1.21 fatalities per event. noticeable aspect, like go beyond . set categories tenths. Now better understanding fatalities data set distributed, lets look evolution across 2021 2022.  graph, can observe peak number fatalities March 2022. go slightly -depth, let’s explore countries saw highest difference compared prior month.  Interestingly, see Mali Ukraine top countries making contributions new peak fatalities, two countries biggest uptick fatalities March 2022 compared February. reader saw peak previous line chart, one may swiftly explained outbreak Russian invasion Ukraine late February. However, missed uptick violence Mali Malian Wagner forces (see analysis information).","code":"## $Success ## [1] \"Authorisation accepted\" df_years %>%    janitor::tabyl(fatalities) %>%    janitor::adorn_rounding(2) %>%    arrange(-n) %>%    head(5) ##  fatalities     n percent ##           1 23373    0.46 ##           0 19094    0.37 ##           2  4298    0.08 ##           3  1803    0.04 ##           4   730    0.01 summary(df_years$fatalities) ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##    0.00    0.00    1.00    1.21    1.00  352.00 df_fatalities <- df_years %>%   mutate(fatalities_bins = case_when(     fatalities > 0 & fatalities <11 ~ \"1 to 10\",     fatalities > 10 & fatalities <101 ~ \"11 to 100\",     fatalities > 101 & fatalities <1001 ~ \"101 to 1000\",     TRUE ~ \"0\"   ))  df_fatalities %>%   janitor::tabyl(fatalities_bins) %>%   janitor::adorn_rounding(2)%>%   arrange(-n) ##  fatalities_bins     n percent ##          1 to 10 31423    0.62 ##                0 19094    0.37 ##        11 to 100   494    0.01 ##      101 to 1000    14    0.00 df_fatalities_monthly <- df_fatalities %>%   group_by(Month = floor_date(ymd(event_date), \"month\")) %>%   summarise(fatalities_sum = sum(fatalities))  ggplot(df_fatalities_monthly,              aes(x = Month, y = fatalities_sum)) +      geom_line(color = \"navy\") +   labs(title = \"Total of fatalities per month\",        subtitle = \"Jan 2021-Aug 2022\",        x = \"Year-Month\",        y = \"Sum of fatalities\") +   theme_light() df_fatalities_monthly_country <- df_fatalities %>%   group_by(Month = floor_date(ymd(event_date), \"month\"), country) %>%   summarise(fatalities_sum = sum(fatalities)) %>%   filter(Month < ymd(\"2022-04-01\") & Month > ymd(\"2022-01-01\")) %>%   arrange(country) %>%   group_by(country) %>%   summarise(difference = diff(fatalities_sum))%>%   arrange(-difference) %>%   filter(difference != 0) ## We are filtering out those countries which didn't change to make a more polished graph.   ggplot(df_fatalities_monthly_country,         aes(y = reorder(country, difference), x = difference)) +   geom_col() +   labs(title = \"Difference in total fatalities per country \",        subtitle = \"February versus March 2022\",        x = \"Total difference in fatalities\",        y = \"Countries\") +   theme_light() +   # theme(panel.grid = element_blank()) +   coord_cartesian(expand = F)"},{"path":"https://billingtt.github.io/acledR/articles/generate_counts.html","id":"generating-counts-of-acled-events","dir":"Articles","previous_headings":"","what":"Generating counts of ACLED events","title":"Generate Event Counts","text":"generate_counts() function creates event counts event type spacial temporal units analysis. required arguments : data ACLED event-level data, unit_id spatial unit analysis (e.g., country, ADMIN1, region), time_id temporal unit (.e., event_date normally), time_target temporal unit aggregation (e.g., week, month, year). time_target = week, ACLED week (starting Saturday) used - see (time)[go time vignette link] example, can take data South America. can generate event counts country-week level: returns tibble columns event type data, well column total events: can also limit request certain event types. example, might want political violence events: Now retain requested event types total corresponds types : instead wanted violent event counts month rather week, simply swap time_target = week time_target = month:","code":"generate_counts(   data,   unit_id,   time_id,   time_target ) library(acledR) acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. #> $Success #> [1] \"Authorisation accepted\" df_sa <- acled_api(regions = c(\"South America\"),                    start_date = \"2022-01-01\",                    end_date = \"2022-04-30\",                    monadic = F) df_sa_agg_weekly <-   df_sa %>%    generate_counts(.,                    unit_id = \"country\",                    time_id = \"event_date\",                   time_target = \"week\") df_sa_agg_weekly %>%    head() %>%    kableExtra::kable() df_sa_agg_weekly_pv <-   df_sa %>%    generate_counts(., unit_id = \"country\",                    time_id = \"event_date\",                   time_target = \"week\",                   event_type = c(\"Battles\",                                   \"Violence against civilians\",                                   \"Explosions/Remote violence\",                                   \"Riots\"))  ## This needs to be changed, it is only mob violence df_sa_agg_weekly %>%    head() %>%    kableExtra::kable() df_sa_agg_monthly_pv <-   df_sa %>%    generate_counts(., unit_id = \"country\",                    time_id = \"event_date\",                   time_target = \"month\",                   event_type = c(\"Battles\",                                   \"Violence against civilians\",                                   \"Explosions/Remote violence\",                                   \"Riots\"))"},{"path":[]},{"path":"https://billingtt.github.io/acledR/articles/generate_counts.html","id":"how-have-event-types-in-africa-changed-over-time","dir":"Articles","previous_headings":"Examples","what":"How have event types in Africa changed over time?","title":"Generate Event Counts","text":"analyst may interested conflict event types changed time within continent. example, consider Africa since 2018. Since ACLED can code multiple regions within continent, need identify regions fall within Africa. can see ACLED regions calling acledR::acled_regions data. , see 5 regions Africa, well first date events coded region. can store region names vector called africa_regions request data country within regions since 2018. can generate event counts month region Africa: can create stacked bar plot event types time country ggplot2 pivoting data region-event type combination one row filtering total_events event type:","code":"acledR::acled_regions #> # A tibble: 17 × 3 #>    region region_name               first_event_date #>     <dbl> <chr>                     <chr>            #>  1      1 Western Africa            1997-01-01       #>  2      2 Middle Africa             1997-01-01       #>  3      3 Eastern Africa            1997-01-01       #>  4      4 Southern Africa           1997-01-05       #>  5      5 Northern Africa           1997-01-01       #>  6      7 South Asia                2010-01-01       #>  7      9 Southeast Asia            2010-01-01       #>  8     11 Middle East               2015-01-01       #>  9     12 Europe                    2018-01-01       #> 10     13 Caucasus and Central Asia 2017-01-01       #> 11     14 Central America           2018-01-01       #> 12     15 South America             2018-01-01       #> 13     16 Caribbean                 2018-01-01       #> 14     17 East Asia                 2018-01-01       #> 15     18 North America             2018-01-01       #> 16     19 Oceania                   2021-01-01       #> 17     20 Antarctica                2021-03-19 africa_regions <- c(\"Western Africa\",                      \"Middle Africa\",                      \"Eastern Africa\",                      \"Southern Africa\",                     \"Northern Africa\")  df_africa <- acled_api(regions = africa_regions,                        start_date = \"2018-01-01\",                        end_date = \"2022-04-30\",                        monadic = F) df_africa_monthly <-   df_africa %>%    generate_counts(., unit_id = \"region\",                    time_id = \"event_date\",                   time_target = \"month\",                   event_type = c(\"Battles\",                                   \"Violence against civilians\",                                   \"Explosions/Remote violence\",                                   \"Riots\")) library(ggplot2)  df_africa_monthly %>%    tidyr::pivot_longer(cols = -c(region, event_month)) %>%    dplyr::filter(name != \"total_events\") %>%       ggplot() +   geom_bar(aes(x = event_month,                 fill = name,                y = value,                group = region),            position = \"stack\", stat = \"identity\") +   facet_wrap(~region, nrow = 3) +   scale_fill_viridis_d(option = \"inferno\",                         begin = 0.1,                        end = 0.9,                        guide = guide_legend(title = \"Event Type\",                                             reverse = T)) +   theme_light() +   theme(legend.position = c(0.75, 0.15),         legend.background = element_rect(color = \"gray90\"))"},{"path":"https://billingtt.github.io/acledR/articles/geography.html","id":"administrative-levels","dir":"Articles","previous_headings":"","what":"Administrative Levels","title":"Geography","text":"mentioned , ACLED’s data set includes six different types spatial information. , administrative levels included, stored columns Admin1, Admin2 Admin3. columns provide information users location event, making easier triangulate locate particular event, well allow analysis across regions, e.g. events moved one region another throughout range time. Administrative levels generally composed followed (examples parenthesis refer Ethiopia / US): Administrative Level 1 (Admin 1): Province Equivalent (e.g. Afar / California)) Administrative Level 2 (Admin 2): District Equivalent. (e.g. Kilbati-Zone 2 / San Diego ) Administrative Level 3 (Admin 3): County Equivalent. (e.g. Abaala) However, administrative levels hardly uniform topic across conflict studies. Administrative levels vary, cases, information administrative levels becomes unreliable, especially Admin 3 level. instance, covering certain countries Africa, administrative levels may change, cases, locations small cities always covered. Additionally, sources may utilize different names, sometimes resulting language dialect variations, names administrative levels may unique. Furthermore, every country defines sub-national boundaries way, thus, many countries Africa include Admin 3s, countries Europe often don’t. account differences, ACLED researchers instructed : Follow sources report terms location. sources incomplete information location, researchers triangulate information following landmarks relevant information mentioned source, utilize precision code (see ) denote . sources include administrative levels part standardized list administrative levels ACLED, researchers allowed include new entries master list checking OpenStreetMap, Google Maps NGA GeoNames database. approach allows standardized way coding events’ locations, often issue covering events around world. However, users utilize different names administrative levels, sometimes occurs humanitarian-related data sets, important take differences consideration. moment, data set include P-Codes. However, include ISO column allow easier connection data sets.","code":""},{"path":"https://billingtt.github.io/acledR/articles/geography.html","id":"precision-codes","dir":"Articles","previous_headings":"","what":"Precision Codes","title":"Geography","text":"often sources different degrees certainty regarding event occurring particular location. instance, sources may report event “near 66 highway near City X”, others may report “event occurred town hall city X along 66 highway”. example, can see two different degrees precision. distinguish different degrees precision, case time, ACLED utilizes different “Precision Codes”. follow:","code":""},{"path":"https://billingtt.github.io/acledR/articles/geography.html","id":"acledr-example","dir":"Articles","previous_headings":"","what":"acledR Example","title":"Geography","text":"example explore events distribution January 2022 across Nigeria utilizing ACLED’s administrative level columns. start pulling data ACLED’s API. First, call acled_acess(), make API call acled_api(). Lets explore top 5 admin1s Nigeria (also called states). observed table, Kaduna Borno two conflict-ridden admin1s Nigeria, however, conflicts appears generally evenly distributed . Lets plot geographical distribution:  Given fact every event comes paired number geographical variables, ACLED’s data particularly useful map conflict given region, country, administrative level. see … vignitte (put link ), can go even map conflict given administrative level thanks .","code":"library(acledR) acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. #> $Success #> [1] \"Authorisation accepted\" df_nigeria <- acled_api(countries = c(\"Nigeria\"),                         start_date = \"2022-01-01\",                         end_date = \"2022-01-31\",                         monadic = F,                         acled_access = T,                         prompt = FALSE) df_nigeria %>%    janitor::tabyl(admin1) %>%    janitor::adorn_rounding(2) %>%    arrange(-n) %>%    head(5)  #>   admin1  n percent #>    Borno 47    0.11 #>   Kaduna 40    0.09 #>    Niger 32    0.07 #>  Zamfara 31    0.07 #>  Katsina 23    0.05 library(sf) library(ggplot2)  # grab admin1 level shapefile for Nigeria via the raster package admin1_nigeria <- raster::getData(name = \"GADM\", country = \"Nigeria\", level = 1) %>%    # convert to sf object   st_as_sf()  # generate admin1 level counts and join to sf object of admin1s df_nigeria_admin1_counts <-   df_nigeria %>%    group_by(admin1) %>%    tally() %>%    left_join(admin1_nigeria, by = c(\"admin1\" = \"NAME_1\")) %>%    st_as_sf()  # start plotting ggplot() +   geom_sf(data = df_nigeria_admin1_counts,            aes(fill = n),           color = \"white\") +   geom_sf_text(data = df_nigeria_admin1_counts %>%                   arrange(-n) %>%                   head(5),                 aes(fill = n, label = admin1),                color = \"gray10\") +   scale_fill_viridis_c(option = \"inferno\",                        guide = guide_colorbar(title = \"Event count\")) +   coord_sf() +   theme_minimal() +   labs(x = \"Longitude\",        y = \"Latitude\",         title = \"ACLED Events across Nigeria\",        subtitle = \"January 2022\")"},{"path":"https://billingtt.github.io/acledR/articles/time.html","id":"precision-codes","dir":"Articles","previous_headings":"","what":"Precision Codes","title":"Time","text":"mentioned , recording event’s dates ACLED utilizes different precision codes, stored time_precision column, highlight accurate date . precision codes assigned follows: 1. sources include actual date event, time precision code “1” recorded. 2. sources note event happened specific week weekend, time precision equals “2” middle week (weekend) used reference date. 3. sources note event took place within particular month, without reference particular date, month’s mid-point chosen event_date unless beginning end month noted (case, first last date used, respectively) “3” noted time_precision.","code":""},{"path":"https://billingtt.github.io/acledR/articles/time.html","id":"acled-week-and-acledr","dir":"Articles","previous_headings":"","what":"ACLED Week and acledR","title":"Time","text":"ACLED’s week like “normal” weeks, follow submission process project. means ACLED’s week starts Saturday, finishes Friday. matter, current future functions project utilize range (Sat-Fri) define constitutes week. reason decision lies efforts team ACLED avoid pitfalls analyse ACLED data. researchers like use “normal” week (Monday-Sunday), aware data collection ACLED occurs Saturday, thus, may incomplete data proceeding week.","code":""},{"path":"https://billingtt.github.io/acledR/articles/time.html","id":"acledr-example","dir":"Articles","previous_headings":"","what":"acledR Example","title":"Time","text":"explore uses time ACLED’s data, can look following example analyzing France’s events throughout 2021. Now gathered data, want explore precise event dates floor celling date (min/max) data frame. can see, data precise, 99% time_precision 1, followed time_precision 2, finally time_precision 3. follows efforts ACLED precise managing dates, make best effort find date event. rare find data set time_precision 2 present, let alone time_precision 3. Next move one best analysis can ACLED’s data, time-series. One things interested looking first number events per day France throughout 2021. see plot, throughout moments year number appears spike - like 1st May 183 events - trend line remains fairly stable. ACLED’s data particularly fitted precise use dates means can continuous monitoring given country throughout time. However, like go slightly specific, looking divergence across months. Basically, want explore, volatile month. can see May 2021 month hosting biggest number events, 1024. hardly surprise, considering also 1st May saw highest number daily events. However, interesting perhaps next highest peak March, April 4th highest peak, perhaps clash previous daily analysis showed. previous plot one get impression latter months volatile (notable peaks days prior May). Lets try add nuance analysis, lets analyse count different event_types across months. can see graph, France’s 2021 primarily riddled protests. However, hardly enough conclude anything France. another vignette go example compare regional averages.","code":"acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. #> $Success #> [1] \"Authorisation accepted\" df_france <- acled_api(countries = c(\"France\"),                        start_date = \"2021-01-01\",                        end_date = \"2021-12-31\",                        monadic = F,                        prompt = FALSE) df_france %>%    janitor::tabyl(time_precision) %>% # Summarize data groupped by time_precision   janitor::adorn_rounding(2) #>  time_precision    n percent #>               1 8614    0.99 #>               2   44    0.01 #>               3    3    0.00  paste0(\"Earliest Date: \", as.character(min(df_france$event_date))) #> [1] \"Earliest Date: 2021-01-01\" paste0(\"Latest Date: \",  as.character(max(df_france$event_date))) #> [1] \"Latest Date: 2021-12-31\" plot <- df_france %>%    group_by(event_date) %>%    tally() %>%    ggplot(aes(x = event_date, y = n)) +   geom_point() +   geom_smooth()+   theme_light() +   labs(x = \"Event Date\",        y = \"Events per Day\",        title = \"ACLED Events in France\",        subtitle = \"January through December 2021\")  ggplotly(plot) plot <- df_france %>%    group_by(month = lubridate::floor_date(event_date, \"month\",                                          week_start = getOption('lubridate.week.start', 6))) %>%    tally() %>%    ggplot(aes(x = month, y = n)) +   geom_line(size=1.2)+   # geom_bar(stat = \"identity\") +   theme_light() +   labs(x = \"Event Date\",        y = \"Events per Day\",        title = \"ACLED Events in France\",        subtitle = \"January through December 2021\")  ggplotly(plot) french_counts <- generate_counts(df_france,                                  unit_id = \"country\",                                  time_id = \"event_date\",                                  time_target = \"month\")%>%   select(-country) %>%   pivot_longer(!event_month,                names_to = \"event_type\",                values_to = \"n_events\")   pfc <- ggplot(french_counts,                aes(x = event_month, y = n_events,                    fill = event_type, text = event_type))+   geom_bar(stat = \"identity\",            position = \"dodge\")+   labs(title = \"Monthly distribution of event types in France\",        x = \"Months\",        y =\"Number of events\")  pfcly <- ggplotly(pfc) pfcly"},{"path":"https://billingtt.github.io/acledR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Trey Billing. Maintainer.","code":""},{"path":"https://billingtt.github.io/acledR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"ACLED (2022). acledR: Manipulate ACLED Data. https://github.com/billingtt/acledR, https://billingtt.github.io/acledR/.","code":"@Manual{,   title = {acledR: Manipulate ACLED Data},   author = {{ACLED}},   year = {2022},   note = {https://github.com/billingtt/acledR, https://billingtt.github.io/acledR/}, }"},{"path":"https://billingtt.github.io/acledR/index.html","id":"overview","dir":"","previous_headings":"","what":"Manipulate ACLED Data","title":"Manipulate ACLED Data","text":"package provides tools extract manipulate data Armed Conflict Location Event Data Project (ACLED). access ACLED data, please register account developer.acleddata.com. can visit guide easily set ACLED account. recommend save ACLED API Key R object can easily re-use key.","code":""},{"path":"https://billingtt.github.io/acledR/index.html","id":"installation-for-private-repo","dir":"","previous_headings":"","what":"Installation (for private repo)","title":"Manipulate ACLED Data","text":"Since package repo currently private, need tell R Github ’re collaborator. , first create Github personal access token (PAT). can set expire certain time (default) permanent. can initiate process internally via: ’ve copied PAT browser, return R run , store PAT locally. recommend also setting PAT .Rprofile ’s stored R sessions (.e., don’t save PAT paste time re-install). Now can install package automatically locate PAT.","code":"# install.packages(\"usethis\") if not installed already # create personal access token - this should redirect to your github page where you can copy the token usethis::create_github_token() # paste the token where it says YourPAT credentials::set_github_pat(\"YourPAT\") # if you run this, it should print your token; if not we've failed Sys.getenv(\"GITHUB_PAT\") # to set your PAT for all R sessions, run file.edit(file.path(\"~\", \".Rprofile\")) # and then paste credentials::set_github_pat(\"YourPAT\") into the .Rprofile script # save the file # install from github devtools::install_github(\"billingtt/acledR\")"},{"path":"https://billingtt.github.io/acledR/index.html","id":"installation-for-public-use","dir":"","previous_headings":"","what":"Installation (for public use)","title":"Manipulate ACLED Data","text":"acledR package gets added Comprehensive R Archive Network (CRAN), users can utilize devtools install package Github. Thankfully, installation rather simple. can install following code:","code":"devtools::install_github(\"billingtt/acledR\") ## if you are interested in a particular branch, please add a 'ref' argument."},{"path":"https://billingtt.github.io/acledR/reference/acled_access.html","id":null,"dir":"Reference","previous_headings":"","what":"Store your ACLED access information into your session. — acled_access","title":"Store your ACLED access information into your session. — acled_access","text":"Simple function store (Sys.setenv() ) ACLED access key acled_api() function. email key stored via acled_access, email key arguments acled_api can NULL.","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store your ACLED access information into your session. — acled_access","text":"","code":"acled_access(email, key)"},{"path":"https://billingtt.github.io/acledR/reference/acled_access.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store your ACLED access information into your session. — acled_access","text":"email email register ACLED Access portal (https://developer.acleddata.com/) key key generated ACLED Access portal.","code":""},{"path":[]},{"path":"https://billingtt.github.io/acledR/reference/acled_access.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store your ACLED access information into your session. — acled_access","text":"","code":"# acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. # Sys.getenv(\"acled_email\") # Sys.getenv(\"acled_key\")"},{"path":"https://billingtt.github.io/acledR/reference/acled_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Request data from ACLED API — acled_api","title":"Request data from ACLED API — acled_api","text":"function allows users easily request data ACLED API. Users can include variables countries, regions, dates interest type file (monadic dyadic). function returns tibble desired ACLED events.","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request data from ACLED API — acled_api","text":"","code":"acled_api(   email = NULL,   key = NULL,   countries = NULL,   regions = NULL,   start_date = \"1997-01-01\",   end_date = Sys.Date(),   timestamp = NULL,   event_types = NULL,   monadic = FALSE,   ...,   acled_access = TRUE,   prompt = TRUE )"},{"path":"https://billingtt.github.io/acledR/reference/acled_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request data from ACLED API — acled_api","text":"email character string. Email associated ACLED account registered https://developer.acleddata.com. key character string. Access key associated ACLED account registered https://developer.acleddata.com. countries character vector. Default NULL, return events countries. Pass vector country names retrieve events specific countries. list ACLED country names may found via acledR::acled_countries. regions vector region names (character) region codes (numeric). Default NULL, return events regions.  Pass vector regions names codes retrieve events countries within specific regions. list ACLED regions may found via acledR::acled_regions. start_date character string. Format 'yyyy-mm-dd'. earliest date return events. default 1997-01-01, earliest date available. end_date character string. Format 'yyyy-mm-dd'. latest date return events. default Sys.Date(), present date. timestamp numerical character string. Provide date datetime written either character string yyyy-mm-dd numeric Unix timestamp access events added updated date. event_types vector one event types (character). Default NULL, return data event types. reurn data specific event types, request one following options (case sensitive): Battles, Violence civilians, Protests, Riots, Strategic Developments, Explosions/Remote violence. monadic logical. FALSE (default), returns dyadic data. TRUE, returns monadic actor1 data. ... string. additional parameters users like add API calls (e.g. interaction ISO) acled_access logical. TRUE (default), used acled_access function email key arguments required. prompt logical. TRUE (default), users receive interactive prompt providing information call (countries requested, number country-days, number API calls required) asking want proceed call. FALSE, call continues without warning, call split returns message specifying many calls made.","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request data from ACLED API — acled_api","text":"Returns tibble ACLED events.","code":""},{"path":[]},{"path":"https://billingtt.github.io/acledR/reference/acled_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Request data from ACLED API — acled_api","text":"","code":"if (FALSE) {  ## Get all the events coded by ACLED in Argentina from 01/01/2022 until 02/01/2022 in dyadic-wide form argen_acled <- acled_api(email = jane.doe.email, key = jane.doe.key, countries = \"Argentina\", start_date = \"2022-01-01\", end_date=\"2022-02-01\", acled_access = FALSE)  ## tibble with all the events from Argentina where each row is one event. argen_acled  ## Get all events coded by ACLED in the Caribbean from 01/01/2022 to 10/01/2022 in monadic-long form using email and key saved in environment acled_access(email = \"jane.doe.email\", key = \"jane.doe.key\") carib_acled <- acled_api(regions = \"Caribbean\", start_date = \"2022-01-01\", end_date=\"2022-01-10\", monadic=TRUE, acled_access = TRUE)  ## Tibble with all the events from the Caribbean where each row is one actor carib_acled }"},{"path":"https://billingtt.github.io/acledR/reference/acled_codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Codebook — acled_codebook","title":"ACLED Codebook — acled_codebook","text":"Codebook ACLED data","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Codebook — acled_codebook","text":"","code":"acled_codebook"},{"path":"https://billingtt.github.io/acledR/reference/acled_codebook.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Codebook — acled_codebook","text":"data frame: Variable Variable names Description Text description variable Values Text description values variable","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Countries — acled_countries","title":"ACLED Countries — acled_countries","text":"ACLED country names, regions, coding start year","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Countries — acled_countries","text":"","code":"acled_countries"},{"path":"https://billingtt.github.io/acledR/reference/acled_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Countries — acled_countries","text":"data frame: country Country names region_name Region names start_year First year coded ACLED","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_deletions_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Request data from the ACLED Deletions API — acled_deletions_api","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"function allows users pull deleted ACLED event IDs Deletions API.","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_deletions_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"","code":"acled_deletions_api(   email = NULL,   key = NULL,   date_deleted = NULL,   acled_access = TRUE )"},{"path":"https://billingtt.github.io/acledR/reference/acled_deletions_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"email character string. Email associated ACLED account registered https://developer.acleddata.com. key character string. Access key associated ACLED account registered https://developer.acleddata.com. date_deleted character string. Format 'yyyy-mm-dd' Unix timestamp. query return deleted events including requested date/timestamp. acled_access logical. TRUE means utilized acled_access function need email key arguments.","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_deletions_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"Returns tibble ACLED data columns event_id_cnty deleted_timestamp.","code":""},{"path":[]},{"path":"https://billingtt.github.io/acledR/reference/acled_deletions_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"","code":"if (FALSE) {  # Request deleted ACLED events since January 1, 2022 acled_deletions_api(date_deleted = \"2022-01-01\", acled_acess = TRUE)  }"},{"path":"https://billingtt.github.io/acledR/reference/acled_event_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Event Categories — acled_event_categories","title":"ACLED Event Categories — acled_event_categories","text":"ACLED event sub-event types, grouped category","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_event_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Event Categories — acled_event_categories","text":"","code":"acled_event_categories"},{"path":"https://billingtt.github.io/acledR/reference/acled_event_categories.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Event Categories — acled_event_categories","text":"data frame: event_type ACLED event type sub_event_type ACLED sub-event type political_violence Dummy indicator whether sub-event type falls within political violence organized_political_violence Dummy indicator whether sub-event type falls within organized political violence disorder Dummy indicator whether sub-event type falls within disorder demonstrations Dummy indicator whether sub-event type falls within demonstrations","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_help.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED's dataset help — acled_help","title":"ACLED's dataset help — acled_help","text":"function allows users consult methodological vignettes different columns ACLED's dataset","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_help.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED's dataset help — acled_help","text":"","code":"acled_help(column = NULL)"},{"path":"https://billingtt.github.io/acledR/reference/acled_help.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ACLED's dataset help — acled_help","text":"column string. string name column consult methodology.","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_help.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ACLED's dataset help — acled_help","text":"acledR vignette","code":""},{"path":[]},{"path":"https://billingtt.github.io/acledR/reference/acled_help.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ACLED's dataset help — acled_help","text":"","code":"if (FALSE) {  ## Get information about the fatalities column acled_help(\"fatalities\") }"},{"path":"https://billingtt.github.io/acledR/reference/acled_regen.html","id":null,"dir":"Reference","previous_headings":"","what":"Regenerating ACLED's deleted columns — acled_regen","title":"Regenerating ACLED's deleted columns — acled_regen","text":"formula allows regenerate columns (applicable) may deleted dataset.","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_regen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regenerating ACLED's deleted columns — acled_regen","text":"","code":"acled_regen(df, column)"},{"path":"https://billingtt.github.io/acledR/reference/acled_regen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regenerating ACLED's deleted columns — acled_regen","text":"df data frame. ACLED's data frame regenerated column created column character string. Name column regenerate. See details info available columns","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_regen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regenerating ACLED's deleted columns — acled_regen","text":"Tibble regenerated column addedd end.","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_regen.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Regenerating ACLED's deleted columns — acled_regen","text":"Please note today, one columns available regenerated event_id_no_cnty iso3","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Regions — acled_regions","title":"ACLED Regions — acled_regions","text":"ACLED region names, region numbers, coding start dates","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Regions — acled_regions","text":"","code":"acled_regions"},{"path":"https://billingtt.github.io/acledR/reference/acled_regions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Regions — acled_regions","text":"data frame: region Region number region_name Region names first_event_date First date (yyyy-mm-dd) coded ACLED","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_rounding.html","id":null,"dir":"Reference","previous_headings":"","what":"Rounding function — acled_rounding","title":"Rounding function — acled_rounding","text":"function addresses conflicts rounding R, especially trying round .","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_rounding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rounding function — acled_rounding","text":"","code":"acled_rounding(num, digits = 0)"},{"path":"https://billingtt.github.io/acledR/reference/acled_rounding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rounding function — acled_rounding","text":"num int. number trying round. digits int. want round . accepts 0 (whole number), 1 (tenth place), 2 (hundredths), etc.","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_rounding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rounding function — acled_rounding","text":"function meant address problem rounding R approach always round even. function meant round things following simple rule. decimal 5+ round , round . 'digits' argument, one can set specificity rounding, 0= whole number, 1 = tenth place, 2=hundreds place, .","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_rounding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rounding function — acled_rounding","text":"","code":"x1 <- 1.569 x2 <- 104.530 x3 <- 54.430 x4 <- 205.49999 acled_rounding(x1) #> [1] 2 acled_rounding(x2) #> [1] 105 acled_rounding(x3) #> [1] 54 acled_rounding(x4) #> [1] 205"},{"path":"https://billingtt.github.io/acledR/reference/calculate_actor_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate actor concentration indices from ACLED data — calculate_actor_index","title":"Calculate actor concentration indices from ACLED data — calculate_actor_index","text":"Calculate actor concentration indices ACLED data","code":""},{"path":"https://billingtt.github.io/acledR/reference/calculate_actor_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate actor concentration indices from ACLED data — calculate_actor_index","text":"","code":"calculate_actor_index(events, method = \"Effective actors\")"},{"path":"https://billingtt.github.io/acledR/reference/calculate_actor_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate actor concentration indices from ACLED data — calculate_actor_index","text":"events Vector outcomes per actor (.e., event counts fatalities). method Index method. Default \"Effective actors\", Inverse Simpson Index. \"Concentration\" calculates Herfindahl–Hirschman Index.","code":""},{"path":"https://billingtt.github.io/acledR/reference/calculate_actor_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate actor concentration indices from ACLED data — calculate_actor_index","text":"Returns data.frame index value (`eff_actors` `concentration`, depending method specified), number unique actors, average number events per actor.","code":""},{"path":[]},{"path":[]},{"path":"https://billingtt.github.io/acledR/reference/filter_actors.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter ACLED Data by Actor — filter_actors","title":"Filter ACLED Data by Actor — filter_actors","text":"function allows users filter ACLED data actor.","code":""},{"path":"https://billingtt.github.io/acledR/reference/filter_actors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter ACLED Data by Actor — filter_actors","text":"","code":"filter_actors(df, actors, filter_cols = \"all\")"},{"path":"https://billingtt.github.io/acledR/reference/filter_actors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter ACLED Data by Actor — filter_actors","text":"df dataframe. ACLED data filter. actors character vector vector character strings. Actor name list actor names use filtering. filter_cols character string. Columns use filtering. Default \"\", filters based actor columns (.e. actor1, actor2, assoc_actor_1, assoc_actor_2). \"Primary\" filters based actor1 actor2 column .","code":""},{"path":"https://billingtt.github.io/acledR/reference/filter_actors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter ACLED Data by Actor — filter_actors","text":"Returns tibble ACLED data filtered selected actors.","code":""},{"path":[]},{"path":"https://billingtt.github.io/acledR/reference/filter_actors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter ACLED Data by Actor — filter_actors","text":"","code":"if (FALSE) {  # Request events from Yemen df_events <- acled_api(countries = \"Yemen\",                        start_date = \"2022-01-01\",                        end_date = \"2022-07-30\",                        monadic = F,                        acled_access = TRUE)  # Create vector of actors of interest yemen_actors <- c('Military Forces of Yemen (2016-) Supreme Political Council', 'Military Forces of Yemen (2012-)')  # Filter to selected actors filtered_df <- filter_actors(df = df_events, actors = yemen_actors, filter_cols = 'all') }"},{"path":"https://billingtt.github.io/acledR/reference/filter_event_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter ACLED data by event type categories — filter_event_types","title":"Filter ACLED data by event type categories — filter_event_types","text":"Filter ACLED data event type categories","code":""},{"path":"https://billingtt.github.io/acledR/reference/filter_event_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter ACLED data by event type categories — filter_event_types","text":"","code":"filter_event_types(data, acled_categories, keep_all_events = FALSE)"},{"path":"https://billingtt.github.io/acledR/reference/filter_event_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter ACLED data by event type categories — filter_event_types","text":"data ACLED event data acled_categories character vector ACLED event type categories. Options include: political_violence, organized_political_violence, disorder, demonstrations. one category may requested one time (e.g., acled_categories = c(\"organized_political_violence\", \"disorder\")). keep_all_events logical. FALSE (default), returned data include events within requested categories. TRUE, returned data retain events, even fall within requested categories. New dummy columns requested category denote categories event type falls within.","code":""},{"path":"https://billingtt.github.io/acledR/reference/filter_event_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter ACLED data by event type categories — filter_event_types","text":"Returns tibble ACLED events new columns (dummy variables) indicating categories event falls . keep_all_events = FALSE, events fall within one requested categories returned. keep_all_events = TRUE, events, including within requested category, returned.","code":""},{"path":[]},{"path":"https://billingtt.github.io/acledR/reference/filter_event_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter ACLED data by event type categories — filter_event_types","text":"","code":"if (FALSE) {  # Request data for 3 countries from the ACLED API df_events <- acled_api(countries = c(\"Nigeria\", \"Benin\", \"Senegal\"),                        start_date = \"2022-01-01\",                        end_date = \"2022-09-30\",                        monadic = F,                        acled_access = TRUE)  # Filter to only ACLED demonstrations df_demonstrations <- filter_event_types(data = df_events, acled_categories = c(\"demonstrations\"))  # This returns a tibble with only peaceful protests, protests with intervention, violence demonstrations, and excessive force against protesters. df_demonstrations  # Users may also filter by multiple event categories df_demonstrations_disorder <- filter_event_types(data = df_events, acled_categories = c(\"demonstrations\", \"disorder\"))  # Which returns all rows that are either demonstrations and/or disorder events df_demonstrations_disorder  }"},{"path":"https://billingtt.github.io/acledR/reference/generate_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate event counts from ACLED data — generate_counts","title":"Generate event counts from ACLED data — generate_counts","text":"Generate event counts ACLED data","code":""},{"path":"https://billingtt.github.io/acledR/reference/generate_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate event counts from ACLED data — generate_counts","text":"","code":"generate_counts(   data,   event_type = NULL,   unit_id,   time_id,   time_target,   start_date = NULL,   end_date = NULL,   add_unit_ids = NULL )"},{"path":"https://billingtt.github.io/acledR/reference/generate_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate event counts from ACLED data — generate_counts","text":"data ACLED data event_type Event types include. one event type included, event counts per type total number events returned. NULL, event types returned. unit_id string. Unit variable (e.g., country, region, admin1, etc.). time_id string. Temporal variable, usually event_date. time_target string. Target temporal unit (e.g. week, month, year). start_date Earliest date include (yyyy-mm-dd). end_date Latest date include (yyyy-mm-dd). add_unit_ids Option add units events throughout time period interest.","code":""},{"path":"https://billingtt.github.io/acledR/reference/generate_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate event counts from ACLED data — generate_counts","text":"Returns tibble grouped unit_id.","code":""},{"path":[]},{"path":"https://billingtt.github.io/acledR/reference/generate_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate event counts from ACLED data — generate_counts","text":"","code":"if (FALSE) {  ### General example ### # Request all events from a few countries df_events <- acled_api(countries = c(\"Brazil\", \"Mexico\", \"Argentina\"),                        start_date = \"2022-01-01\",                        end_date = \"2022-07-30\",                        monadic = F,                        acled_access = TRUE)  # Generate event counts at the admin1-month level df_counts <- generate_counts(data = df_events,                              unit_id = \"admin1\",                              time_id = \"event_date\",                              time_target = \"month\")    ### add_unit_ids example ### # Request riots in the United States and Canada between January 1st and January 30th 2020 df_riots <- acled_api(countries = c(\"United States\", \"Canada\"),                        start_date = \"2022-01-01\",                        end_date = \"2022-01-30\",                        event_types = \"Riots\",                        monadic = F,                        acled_access = TRUE)  # Notice that there are no riot events in Canada over this period table(df_riots$country)  # Generate weekly riot counts # Use the add_unit_ids paramater so Canada is assigned 0 events each week # If add_unit_ids was not included, only weekly counts for the United States would be returned since Canada had no riots in the requested time period df_counts_riots <- generate_counts(data = df_riots,                                    unit_id = \"country\",                                    event_type = \"Riots\",                                    time_id = \"event_date\",                                    time_target = \"week\",                                    add_unit_ids = \"Canada\")  }"},{"path":"https://billingtt.github.io/acledR/reference/generate_movers.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate moving statistics — generate_movers","title":"Generate moving statistics — generate_movers","text":"Generate moving statistics","code":""},{"path":"https://billingtt.github.io/acledR/reference/generate_movers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate moving statistics — generate_movers","text":"","code":"generate_movers(   data,   var,   unit_id,   time_id,   slide_funs,   slide_periods,   na.rm = T,   complete = T )"},{"path":"https://billingtt.github.io/acledR/reference/generate_movers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate moving statistics — generate_movers","text":"data ACLED data. var Variable interest. unit_id Spatial unit analysis (e.g., country, ADMIN1, region). time_id Temporal variable (e.g., week, month, year). slide_funs Requested moving statistics. Character vector options including mean, median, sd, min, max. slide_periods many periods past summarize . Vector one integers. Inf includes previous periods. na.rm Whether include NAs calculations. complete Whether reqiure least requested time horizon lapse prior calculating moving statistics. example, slide_periods = 4, return NAs first 4 periods data begin calculating moving statistic fifth time period. FALSE, moving statistics available time periods calculated, even requested time horizon elapsed.","code":""},{"path":"https://billingtt.github.io/acledR/reference/generate_movers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate moving statistics — generate_movers","text":"Returns tibble grouped unit_id.","code":""},{"path":[]},{"path":"https://billingtt.github.io/acledR/reference/generate_movers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate moving statistics — generate_movers","text":"","code":"if (FALSE) {  # Request all events in India since 2018 df_india <- acled_api(countries = \"India\",                       start_date = \"2018-01-01\",                       end_date = \"2022-08-30\",                       monadic = F)  # Aggregate to event counts per month across India df_india_agg <-    df_india %>%    generate_counts(.,    unit_id = \"country\",    time_id = \"event_date\",    time_target = \"month\")  # Generate 3 moving average of total events per month df_india_agg_movers <-    generate_movers(data = df_india_agg,    var = \"total_events\",    unit_id = \"country\",    time_id = \"event_month\",    slide_funs = \"mean\",    slide_periods = 3) }"},{"path":"https://billingtt.github.io/acledR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://billingtt.github.io/acledR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://billingtt.github.io/acledR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://billingtt.github.io/acledR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""}]
