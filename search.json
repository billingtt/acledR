[{"path":[]},{"path":"https://billingtt.github.io/acledR/articles/generate_counts.html","id":"how-have-event-types-in-africa-changed-over-time","dir":"Articles","previous_headings":"Examples","what":"How have event types in Africa changed over time?","title":"Generate Event Counts","text":"analyst might interested conflict event types changed time within continent. example, let’s consider Africa since 2018. Since ACLED codes multiple regions within continent, need identify regions fall within Africa. can see ACLED regions calling acledR::acled_regions data: , see 5 regions Africa, well first date events coded region. can store region names vector called africa_regions request data country within regions since 2018. can generate event counts month region Africa: quick data wrangling pivot data region-event type combination one row filtering total_events event type, can create stacked bar plot event types time country ggplot2:","code":"acledR::acled_regions #> # A tibble: 17 × 4 #>    region region_name               first_event_date last_event_date #>     <dbl> <chr>                     <chr>            <chr>           #>  1      1 Western Africa            1997-01-01       2022-04-15      #>  2      2 Middle Africa             1997-01-01       2022-04-15      #>  3      3 Eastern Africa            1997-01-01       2022-04-15      #>  4      4 Southern Africa           1997-01-05       2022-04-14      #>  5      5 Northern Africa           1997-01-01       2022-04-15      #>  6      7 South Asia                2010-01-01       2022-04-15      #>  7      9 Southeast Asia            2010-01-01       2022-04-15      #>  8     11 Middle East               2015-01-01       2022-04-15      #>  9     12 Europe                    2018-01-01       2022-04-15      #> 10     13 Caucasus and Central Asia 2017-01-01       2022-04-15      #> 11     14 Central America           2018-01-01       2022-04-15      #> 12     15 South America             2018-01-01       2022-04-15      #> 13     16 Caribbean                 2018-01-01       2022-04-15      #> 14     17 East Asia                 2018-01-01       2022-04-15      #> 15     18 North America             2018-01-01       2022-04-15      #> 16     19 Oceania                   2021-01-01       2022-04-14      #> 17     20 Antarctica                2021-03-19       2022-03-25 africa_regions <- c(\"Western Africa\",                      \"Middle Africa\",                      \"Eastern Africa\",                      \"Southern Africa\",                     \"Northern Africa\")  df_africa <- acled_api(email = Sys.getenv(\"email_address\"),                        key = Sys.getenv(\"acled_key\"),                        regions = africa_regions,                        start_date = \"2018-01-01\",                        end_date = \"2022-04-30\",                        monadic = F) df_africa_monthly <-   df_africa %>%    generate_counts(., unit_id = \"region\",                    time_id = \"event_date\",                   time_target = \"month\",                   event_type = c(\"Battles\",                                   \"Violence against civilians\",                                   \"Explosions/Remote violence\",                                   \"Riots\")) library(ggplot2)  df_africa_monthly %>%    tidyr::pivot_longer(cols = -c(region, event_month)) %>%    dplyr::filter(name != \"total_events\") %>%       ggplot() +   geom_bar(aes(x = event_month,                 fill = name,                y = value,                group = region),            position = \"stack\", stat = \"identity\") +   facet_wrap(~region, nrow = 3) +   scale_fill_viridis_d(option = \"inferno\",                         begin = 0.1,                        end = 0.9,                        guide = guide_legend(title = \"Event Type\",                                             reverse = T)) +   theme_light() +   theme(legend.position = c(0.75, 0.15),         legend.background = element_rect(color = \"gray90\"))"},{"path":"https://billingtt.github.io/acledR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Trey Billing. Maintainer.","code":""},{"path":"https://billingtt.github.io/acledR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Billing T (2022). acledR: Manipulate ACLED Data. https://github.com/billingtt/acledR, https://billingtt.github.io/acledR/.","code":"@Manual{,   title = {acledR: Manipulate ACLED Data},   author = {Trey Billing},   year = {2022},   note = {https://github.com/billingtt/acledR, https://billingtt.github.io/acledR/}, }"},{"path":"https://billingtt.github.io/acledR/index.html","id":"acledr","dir":"","previous_headings":"","what":"Manipulate ACLED Data","title":"Manipulate ACLED Data","text":"Manipulate ACLED Data","code":""},{"path":"https://billingtt.github.io/acledR/index.html","id":"installation-for-private-repo","dir":"","previous_headings":"","what":"Installation (for private repo)","title":"Manipulate ACLED Data","text":"Since package repo currently private, need tell R Github ’re collaborator. , first create Github personal access token (PAT). can set expire certain time (default) permanent. can initiate process internally via: ’ve copied PAT browser, return R run , store PAT locally. recommend also setting PAT .Rprofile ’s stored R sessions (.e., don’t save PAT paste time re-install). Now can install package automatically locate PAT.","code":"# install.packages(\"usethis\") if not installed already # create personal access token - this should redirect to your github page where you can copy the token usethis::create_github_token() # paste the token where it says YourPAT credentials::set_github_pat(\"YourPAT\") # if you run this, it should print your token; if not we've failed Sys.getenv(\"GITHUB_PAT\") # to set your PAT for all R sessions, run file.edit(file.path(\"~\", \".Rprofile\")) # and then paste credentials::set_github_pat(\"YourPAT\") into the .Rprofile script # save the file # install from github devtools::install_github(\"billingtt/acledR\")"},{"path":"https://billingtt.github.io/acledR/reference/acled_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Request data from ACLED API — acled_api","title":"Request data from ACLED API — acled_api","text":"Processes requests ACLED's API","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request data from ACLED API — acled_api","text":"","code":"acled_api(   email,   key,   countries = NULL,   regions = NULL,   start_date = NULL,   end_date = NULL,   monadic = FALSE )"},{"path":"https://billingtt.github.io/acledR/reference/acled_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request data from ACLED API — acled_api","text":"email character string. Email associated ACLED account registered https://developer.acleddata.com. key character string. Access key associated ACLED account registered https://developer.acleddata.com. countries character vector. Default NULL, return events countries. Pass vector country names retrieve events specific countries. list ACLED country names may found via acledR::acled_countries, regions vector region names (character) region codes (numeric). Default NULL, return events regions.  Pass vector regions names codes retrieve events countries within specific regions. list ACLED regions may found via acledR::acled_regions, start_date character string. Format 'yyyy-mm-dd'. earliest date return events. default NULL, return events available time periods. 'start_date' NULL, 'end_date' must also NULL. end_date character string. Format 'yyyy-mm-dd'. latest date return events. default NULL, return events available time periods. 'end_date' NULL, 'start_date' must also NULL. monadic logical. FALSE (default), returns dyadic data. TRUE, returns monadic data.","code":""},{"path":"https://billingtt.github.io/acledR/reference/acled_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request data from ACLED API — acled_api","text":"Returns tibble ACLED events.","code":""},{"path":"https://billingtt.github.io/acledR/reference/calculate_actor_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate actor concentration indices from ACLED data — calculate_actor_index","title":"Calculate actor concentration indices from ACLED data — calculate_actor_index","text":"Calculate actor concentration indices ACLED data","code":""},{"path":"https://billingtt.github.io/acledR/reference/calculate_actor_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate actor concentration indices from ACLED data — calculate_actor_index","text":"","code":"calculate_actor_index(events, method = \"Effective actors\")"},{"path":"https://billingtt.github.io/acledR/reference/calculate_actor_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate actor concentration indices from ACLED data — calculate_actor_index","text":"events Vector event counts per actor. method Index method. Default \"Effective actors\", Inverse Simpson Index. \"Concentration\" calculates Herfindahl–Hirschman Index.","code":""},{"path":"https://billingtt.github.io/acledR/reference/calculate_actor_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate actor concentration indices from ACLED data — calculate_actor_index","text":"Returns data.frame index value, number unique actors, average number events per actor.","code":""},{"path":"https://billingtt.github.io/acledR/reference/generate_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate event counts from ACLED data — generate_counts","title":"Generate event counts from ACLED data — generate_counts","text":"Generate event counts ACLED data","code":""},{"path":"https://billingtt.github.io/acledR/reference/generate_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate event counts from ACLED data — generate_counts","text":"","code":"generate_counts(   data,   event_type = NULL,   unit_id,   time_id,   time_target,   start_date = NULL,   end_date = NULL,   add_unit_ids = NULL )"},{"path":"https://billingtt.github.io/acledR/reference/generate_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate event counts from ACLED data — generate_counts","text":"data ACLED data event_type Event types include. one event type included, event counts per type total number events returned. unit_id Unit variable time_id Temporal variable time_target Target temporal unit start_date Earliest date include end_date Latest date include add_unit_ids Option add units events certain time periods","code":""},{"path":"https://billingtt.github.io/acledR/reference/generate_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate event counts from ACLED data — generate_counts","text":"Returns tibble grouped unit_id","code":""},{"path":"https://billingtt.github.io/acledR/reference/generate_movers.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate moving statistics — generate_movers","title":"Generate moving statistics — generate_movers","text":"Generate moving statistics","code":""},{"path":"https://billingtt.github.io/acledR/reference/generate_movers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate moving statistics — generate_movers","text":"","code":"generate_movers(   data,   var,   unit_id,   time_id,   slide_funs,   slide_periods,   na.rm = T,   complete = T )"},{"path":"https://billingtt.github.io/acledR/reference/generate_movers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate moving statistics — generate_movers","text":"data ACLED data. unit_id Unit variable. time_id Temporal variable. slide_funs Requested moving statistics. Character vector options including mean, median, sd, min, max. slide_periods many periods past summarize . Vector one integers. Inf includes previous periods. na.rm Whether include NAs calculations. complete Whether requre least requested time horizon lapse prior calculating moving statistics. example, slide_periods = 4, return NAs first 4 periods data begin calculating moving statistic fifth time period. FALSE, moving statistics available time periods calculated, even requested time horizon elapsed.","code":""},{"path":"https://billingtt.github.io/acledR/reference/generate_movers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate moving statistics — generate_movers","text":"Returns tibble grouped unit_id.","code":""},{"path":"https://billingtt.github.io/acledR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://billingtt.github.io/acledR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://billingtt.github.io/acledR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://billingtt.github.io/acledR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""}]
