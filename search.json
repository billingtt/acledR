[{"path":"https://acled.github.io/acledR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://acled.github.io/acledR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://acled.github.io/acledR/articles/acled_api.html","id":"accessing-the-api","dir":"Articles","previous_headings":"","what":"Accessing the API","title":"Accessing and Utilizing ACLED's API","text":"use ACLED’s API, must first register account ACLED’s Access Portal. can find information registering account visiting ACLED’s access guide. store utilize registered credentials (email unique key), can either: (recommended) Using acled_access() verify credentials store local environment given session. Manually storing credentials permanent use across sessions. can store credentials using acled_access() following: Alternatively, manually store credentials variable R environment, can run following: open .Renviron file. open, can set: Afterwards, save file. can confirm properly stored running Sys.getenv(\"email_address\") return stored email address Sys.getenv(\"acled_key\") return stored ACLED key console.","code":"acled_access(\"your_email\", \"your_key\") # to be run every session before doing an API call. file.edit(file.path(\"~\", \".Renviron\")) email_address = \"your_email\" acled_key = \"your_key\""},{"path":"https://acled.github.io/acledR/articles/acled_api.html","id":"acled-api","dir":"Articles","previous_headings":"","what":"ACLED API","title":"Accessing and Utilizing ACLED's API","text":"acled_api() function can use request process ACLED API calls. function takes following arguments:","code":"acled_api(email = NULL,           key = NULL,           countries = NULL,           regions = NULL,           start_date = \"1997-01-01\",           end_date = Sys.Date(),           timestamp = NULL,           event_types = NULL,           monadic = FALSE,           ...,           acled_access = TRUE,            prompt = TRUE)"},{"path":[]},{"path":"https://acled.github.io/acledR/articles/acled_api.html","id":"geographical-filters","dir":"Articles","previous_headings":"Parameters for the API","what":"Geographical filters","title":"Accessing and Utilizing ACLED's API","text":"can use countries regions parameters specify locations like request data. values NULL included, API return data countries regions. like request data multiple countries, can using vector country names (e.g., c(\"Argentina\",\"Spain\",\"Bolivia\")). Similarly, can request data one regions using either vector region names numeric codes. acledR::acled_countries acledR::acled_regions show full lists countries regions available. Please visit ACLED’s Geography vignette information.","code":""},{"path":"https://acled.github.io/acledR/articles/acled_api.html","id":"temporal-filters","dir":"Articles","previous_headings":"Parameters for the API","what":"Temporal filters","title":"Accessing and Utilizing ACLED's API","text":"can specify date range like receive data using start_date end_date parameters, require data “yyyy-mm-dd” format. can use timestamp parameter select data added amended specific time period. Please keep mind timestamp indicates event added modified ACLED’s dataset, meaning event occurred far past (.e., old event date) may still recent timestamp recently amended. practice, timestamp parameter typically used analysis instead used keep dataset date changes made ACLED’s data. learn keep datasets date, visit Keeping datasets date page acledR approach guide relevant excel spreadsheet tools.","code":""},{"path":"https://acled.github.io/acledR/articles/acled_api.html","id":"additional-filters","dir":"Articles","previous_headings":"Parameters for the API","what":"Additional filters","title":"Accessing and Utilizing ACLED's API","text":"can also use event_types argument filter specific event_types ACLED data. , enter event_type interest string vector strings (e.g., event_types = \"Battles\" event_types = c(\"Battles\", \"Protests\")). description available event_types ACLED’s dataset, please refer ACLED’s codebook. ACLED data typically wide dyadic format, row contains multiple actor columns, actors interacting event. However, can request long monadic format using monadic argument. default, argument FALSE, meaning receive dyadic version data default. monadic=TRUE, function return monadic (“long-form”) data frame one actor (based actor1 actor2). transforming dataset wide long without utilizing API, transforming based different sets columns, visit . information difference wide/dyadic monadic/long datasets, please visit API guide ... parameter represents arguments might want include API query, ISO Interaction. want use filters others included list parameters described , can write &paramenter=value. instance, might wish include &iso=4 end function. can visit ACLED’s API guide learn valid parameters.","code":""},{"path":"https://acled.github.io/acledR/articles/acled_api.html","id":"function-options","dir":"Articles","previous_headings":"Parameters for the API","what":"Function options","title":"Accessing and Utilizing ACLED's API","text":"can exclude email key parameters within function acled_access() used beforehand credentials stored environment variables. Alternatively, can set acled_access FALSE manually include email key arguments function. can use prompt argument specify function handles API calls return large amounts data. prompt=TRUE, receive interactive prompt (see Handling big API calls immediately ). want interactive prompt (e.g., acled_api() part routine script), can set prompt = FALSE.","code":""},{"path":"https://acled.github.io/acledR/articles/acled_api.html","id":"handling-big-api-calls","dir":"Articles","previous_headings":"","what":"Handling big API calls","title":"Accessing and Utilizing ACLED's API","text":"common executing API calls, handling large volumes data requires special consideration. ACLED’s case, base API uses pagination address issues, pagination can confusing newer users (see API guide detailed explanation). Fortunately, package avoids issue. Instead manual pagination, acled_api() function splits call automatically. acled_api() first estimate much data requesting. prompted message includes following: number countries data requested, number country-days data requested, country-days number days specified date range multiplied number countries data requested, number API calls needed, based estimate big call , question asking whether, given information limited number available API calls, like proceed API call. Note: country-day used estimate amount data requested–analytical measurement represent amount data available country.","code":""},{"path":"https://acled.github.io/acledR/articles/acled_api.html","id":"example---gathering-data-with-acled_api","dir":"Articles","previous_headings":"","what":"Example - Gathering data with acled_api()","title":"Accessing and Utilizing ACLED's API","text":"Imagine interested events “Brazil” occurring January 1st, 2022, December 1st, 2022. returns tibble includes ACLED event “Brazil” specified period: wanted data “Brazil” “Colombia”, execute following: interested events occurring larger area, may simpler omit countries parameter include regions argument instead. also include event_type argument receive specific type event: can use timestamp column/filter specify dates like receive new amended data. can include argument either string (“yyyy-mm-dd”) numeric Unix timestamp: like include one type interaction (e.g., “Rioters versus Civilians (57)”), can add interaction code ... argument: also request monadic version data setting monadic = TRUE: Best luck!","code":"library(acledR) library(dplyr)  #Note: This is simply an example–you will need to include your own credentials rather than the email and key placeholders that are included below.  acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\")   df_br <- acled_api(countries = c(\"Brazil\"),                    start_date = \"2022-01-01\",                    end_date = \"2022-12-01\",                    monadic = F,                    acled_access = TRUE,                    prompt = F) head(df_br, 5) #> # A tibble: 5 × 31 #>   event_id_cnty event_date  year time_precision disorder_type      event_type #>   <chr>         <date>     <dbl>          <dbl> <chr>              <chr>      #> 1 BRA61584      2022-12-01  2022              1 Political violence Battles    #> 2 BRA61590      2022-12-01  2022              1 Political violence Battles    #> 3 BRA61592      2022-12-01  2022              1 Political violence Battles    #> 4 BRA61599      2022-12-01  2022              1 Political violence Battles    #> 5 BRA61609      2022-12-01  2022              1 Political violence Battles    #> # ℹ 25 more variables: sub_event_type <chr>, actor1 <chr>, assoc_actor_1 <chr>, #> #   inter1 <dbl>, actor2 <chr>, assoc_actor_2 <chr>, inter2 <dbl>, #> #   interaction <dbl>, civilian_targeting <chr>, iso <dbl>, region <chr>, #> #   country <chr>, admin1 <chr>, admin2 <chr>, admin3 <lgl>, location <chr>, #> #   latitude <dbl>, longitude <dbl>, geo_precision <dbl>, source <chr>, #> #   source_scale <chr>, notes <chr>, fatalities <dbl>, tags <chr>, #> #   timestamp <dbl> df_br_co <- acled_api(countries = c(\"Brazil\", \"Colombia\"),                       start_date = \"2022-01-01\",                       end_date = \"2022-12-01\",                       monadic = F,                       acled_access = TRUE,                       prompt = F) df_sa <- acled_api(regions = c(\"South America\"),                    start_date = \"2022-01-01\",                    end_date = \"2022-12-01\",                    event_type = \"Protests\",                    monadic = F,                    acled_access = TRUE,                    prompt = F) df_br_co <- acled_api(countries = c(\"Brazil\", \"Colombia\"),                       start_date = \"2022-01-01\",                       end_date = \"2022-12-01\",                       monadic = F,                       # timestamp = \"2022-01-24\" -> in the case of string                       timestamp = 1643056974, # -> in the case of a numeric Unix timestamp                       acled_access = TRUE,                       prompt = F) df_sa <- acled_api(countries = c(\"Brazil\", \"Colombia\"),                    start_date = \"2022-01-01\",                    end_date = \"2022-12-01\",                    monadic = F,                    ... = \"&interaction=57\",                    acled_access = TRUE,                    prompt = F) df_sa_monadic <- acled_api(regions = c(\"South America\"),                            start_date = \"2022-01-01\",                            end_date = \"2022-12-01\",                            monadic = T,                            acled_access = TRUE,                            prompt = F)"},{"path":"https://acled.github.io/acledR/articles/acled_codebook.html","id":"acled-overview","dir":"Articles","previous_headings":"","what":"ACLED Overview","title":"ACLED Codebook","text":"ACLED project codes reported information type, agents, location, date, characteristics political violence events, demonstrations select politically relevant non-violent events. ACLED focuses tracking range violent non-violent actions political agents, including governments, rebels, militias, identity groups, political parties, external actors, rioters, protesters civilians. Political violence defined use force group political purpose motivation. ACLED records political violence constituent events, intent produce comprehensive overview forms political disorder, expressed violence demonstrations, within across states. politically violent event single altercation often force used one groups toward political end, although non-violent instances – including protests strategic developments – included dataset capture potential pre-cursors critical junctures violent conflict. fundamental unit observation ACLED event. Events involve designated actors – e.g. named rebel group, militia state forces. occur specific named location (identified name geographic coordinates) specific day.","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/articles/acled_codebook.html","id":"acled-help","dir":"Articles","previous_headings":"ACLED Overview","what":"ACLED Help","title":"ACLED Codebook","text":"assist users understand column dataset represents, added function redirects users relevant documentation column question. function acled_help(): users can observe, function relatively straightforward, requiring one argument. case column refers column users may interested exploring . Note: acled_help() supports one column time. example, user like know fatalities column, //can write acled_help(column=\"fatalities\") prompt fatalities vignette. columns standalone documentation vignette, e.g. Fatalities. However, others either part another vignette, e.g. admins geographical vignette.","code":""},{"path":"https://acled.github.io/acledR/articles/acled_deletions_api.html","id":"keeping-check-of-updates---acled_update","dir":"Articles","previous_headings":"","what":"Keeping check of updates - acled_update()","title":"Deletions API: Keeping your dataset up to date","text":"covered detailed guide updating dataset, cases events updated. updated, event_id_cnty remains rest information gets updated overwritten. Different deleted events, separate API endpoint check updated events. events updated, timestamp changes timestamp update. means, can find modified events utilizing acledR::acled_api() providing latest timestamp (.e. max({ACLED dataset}$timestamp))) timestamp argument function. get duplicated events, likely updated events, keep one higher timestamp. simplify process, acledR includes function makes update following steps previously explained: acled_update. function composed following arguments: - df: dataframe update, structure ACLED’s dyadic dataframes (.e. result acled_api()) - start_date: Along end_date determine temporal range update. default date range df. - end_date: Along start_date determine temporal range update. default date range df. - countries: case dataset include particular countries, can add function filter new events countries. - regions: case dataset include particular regions, can add function filter new events regions. - event_types: case dataset include particular event_types, can add function filter new events event_types. - acled_acess: already utilized acled_acess(), can set option TRUE (default) wont required input email key. - email: email registered ACLED’s Access Portal. required acled_access = TRUE. - key: key registered ACLED’s Access Portal. required acled_access = TRUE. - deleted: TRUE, function also deal deleted events, utilizing ACLED API’s deleted endpoint. - prompts: Use option supress allow prompts regarding call. See acled_api(). acled_update() utilize dataset provide gather new events based timestamp, add original dataset, well remove deleted events (deleted = TRUE).","code":"acled_update(   df,   countries = NULL,   regions = NULL,   event_types = NULL,   acled_access = TRUE,   email = NULL,   key = NULL,   deleted = TRUE,   prompts = T)"},{"path":"https://acled.github.io/acledR/articles/acled_deletions_api.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Deletions API: Keeping your dataset up to date","text":"section show use acled_update keep datasets updated. Load older dataset: last time gathered dataset? snippet checks . dataset updated since , need update . , just utilize acled_update(). order keep update within dates dataset, can ignore start_date end_date arguments. Similarly, going keep deleted=TRUE also remove deleted events. Now dataset captures modified newly created events. Best luck!","code":"library(acledR) library(lubridate) library(dplyr) acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. ## Success! Credentials authorized argen_dummy_acled_file <- acledR::acled_old_dummy # Here is our old personal ACLED dataset latest_timestamp_unix <- max(argen_dummy_acled_file$timestamp)  latest_timestamp <- as_datetime(latest_timestamp_unix) new_argen_dataset <- acled_update(argen_dummy_acled_file,                                    additional_countries = \"Argentina\",                                    acled_access = T,                                    prompts = FALSE) ## Requesting data for 1 countries. Accounting for the requested time period and ACLED coverage dates, this request includes approximately 350 events. ## Processing API request ## Extracting content from API request ## Dataset updated.  ##  Old number of events: 326.  ##  New events: 1.  ##  Deleted events: 0.  ##  Total new & modified events: 64"},{"path":"https://acled.github.io/acledR/articles/acled_rounding.html","id":"acled-rounding","dir":"Articles","previous_headings":"","what":"ACLED Rounding","title":"ACLED Rounding","text":"acled_rounding()utility function providing “intuitive” way rounding R, contrary base R`s “round even”. concept rounding even something may particularly useful statistics (discipline closely aligned origins R Language), however, can rather unintuative users want routine approach. acledR::acled_rounding() rather straight forward function, closely following structure base R’s round(): arguments acled_rounding() first number round (num) , number digits round towards (digits). digits equals 1, rounds tenths place (result = 0.1), 2 rounds hundredths place (result = 0.01), -1 rounds tens place (result = 10), -2 rounds hundred place (result = 100) . intutively, value means number digits next ..","code":"acled_rounding(num, digits = 0)"},{"path":"https://acled.github.io/acledR/articles/acled_rounding.html","id":"example---rounding-in-acledr-and-in-base-r","dir":"Articles","previous_headings":"","what":"Example - Rounding in acledR and in Base R","title":"ACLED Rounding","text":"put simply, formula performs simple task - round like round day--day interactions. , 2.5 -> 3 2.4 -> 2 2.7 -> 3 example highlights difference (note difference appears rounding number target digit equal 5): example can see base R rather inconsistent rounding. x1 round 10, rounded . x2 rounded 8, even last digit cases - 5. main issues acled_rounding() aims solve: base R rounds result’s whole number. round() consistent - , consistently rounds even. Lets now explore acled_rounding() approaches task: can see, acledR’s function deviates base R rounding last digit 5. differences can noted x2 x3, rounding last digit 5.","code":"library(acledR)  x1 <- 9.5 x2 <- 8.5 x3 <- 1.45  # First lets see how base R does it: round(x1) ## [1] 10 round(x2) ## [1] 8 round(x3, digits = 0) ## [1] 1 round(x3, digits = 1) ## [1] 1.4 acled_rounding(x1) ## [1] 10 acled_rounding(x2) ## [1] 9 acled_rounding(x3, digits = 0) ## [1] 1 acled_rounding(x3, digits = 1) ## [1] 1.5"},{"path":"https://acled.github.io/acledR/articles/acled_sources.html","id":"what-is-a-source-in-acled","dir":"Articles","previous_headings":"","what":"What is a source in ACLED?","title":"Sourcing in ACLED","text":"source ACLED often local partner (e.g. Kivu Security Tracker Congo), international media outlet (BBC News), local/regional media outlets (e.g. mediacongo.net Congo). However, see example , events sometimes include one source. ACLED hires researchers research managers adept knowledge regions, thus, acute understanding local sources, proposed included part ACLED’s source checklist. source checklist list sources researchers required monitor, sources often evaluated reliability, recurrence, validity.","code":""},{"path":"https://acled.github.io/acledR/articles/acled_sources.html","id":"what-does-acled-mean-by-source-scale","dir":"Articles","previous_headings":"","what":"What does ACLED mean by ‘Source scale’?","title":"Sourcing in ACLED","text":"Source scale refers scale relevant source operates . ACLED traditionally codes following scales source_scale column: Local Sub-national National Regional International Often times users can find source scale contain one mentioned categories delimited -. result event utilizing multiple sources vary across scope. However, users `source_scale`` column must remember source scale imply less legitimacy, accuracy direct information. important mention, still, ACLED supports gathering utilizing local sources, reflected numerous partnerships ACLED local organizations.","code":""},{"path":"https://acled.github.io/acledR/articles/acled_sources.html","id":"acledr-example","dir":"Articles","previous_headings":"","what":"acledR Example","title":"Sourcing in ACLED","text":"following example exploring use sources source scales data. following chunk retrieve data Georgia year 2021, explore composition sources dataset. Now data Georgia throughout 2021, like start exploring distribution sources source scale dataset. However, two important things note source, source_scale. delimiters cells lead multiple values one cell - often issue try operate directly values. Thus, able generate meaningful statistics , separate values pivot . Let’s sources column, sources delimited ; can see, three main sources Georgian dataset 2021 Rustavi 2, interpressnews, RFE/RL also known Radio Free Europe/Radio Liberty. can already gather information source used ACLED. Two three Georgian sources, lot content Georgian language, one (RFE/RL) international source coverage Georgia. emphasis local, national sometimes non-english reporting allows us avoid pitfalls english international coverage political violence outside traditionally western countries. See (need add clionah & roudabeh article) Now know sources, let’s explore scale . can see confirm saw , regions particular reliance national sources. precisely see Georgian data set, National sources used 73% data set, followed international sources 25%. Note represent 668 events exclusively national sources, 668 counts national sources. ACLED writes source scales, meant represent aggregated scales source columns. example: - source column 1 source national, 1 source international, source “national-international” - source column 2 national sources, 1 international, source “national-international”. Note national repeated twice (thus following number national sources) .","code":"acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. ## Success! Credentials authorized df_geo <- acled_api(countries = c(\"Georgia\"),                    start_date = \"2021-01-01\",                    end_date = \"2022-01-01\",                    monadic = F,                    acled_access = T,                    prompt = F) ## Requesting data for 1 countries. Accounting for the requested time period and ACLED coverage dates, this request includes approximately 913 events. ## Processing API request ## Extracting content from API request sources_df_geo <- df_geo %>%       tidyr::separate_rows(source, sep = \";\") %>%       mutate(source = stringr::str_trim(source,side = \"both\")) %>%       relocate(source,.before=\"source_scale\")   sources_df_geo %>%   group_by(source)%>%   tally() %>%   arrange(-n) ## # A tibble: 22 × 2 ##    source                            n ##    <chr>                         <int> ##  1 Rustavi 2                       172 ##  2 Interpressnews                  153 ##  3 RFE/RL                          147 ##  4 Mtavari Arkhi                    91 ##  5 Caucasian Knot                   77 ##  6 Agenda.ge                        68 ##  7 Imedinews.ge                     65 ##  8 Civil Georgia                    39 ##  9 Black Sea Press: News Georgia    35 ## 10 Netgazeti.ge                     25 ## # ℹ 12 more rows df_geo %>%     tidyr::separate_rows(source_scale, sep = \"-\") %>%     mutate(source_scale = stringr::str_trim(source_scale,side = \"both\")) %>%     relocate(source_scale,.after=\"source\") %>%     janitor::tabyl(source_scale) %>% # Summarize data groupped by time_precision     janitor::adorn_rounding(2) %>%     arrange(-n) ##   source_scale   n percent ##       National 666    0.73 ##  International 245    0.27 ##    Subnational   4    0.00 ##       Regional   1    0.00"},{"path":"https://acled.github.io/acledR/articles/acled_transformations.html","id":"switch-between-numeric-and-string-interaction-codes---acled_transform_interactions","dir":"Articles","previous_headings":"","what":"1. Switch between numeric and string interaction codes - acled_transform_interactions()","title":"Transformation of ACLED data","text":"first functions can find suite data manipulation, acled_transform_interactions(), allows easily transition numeric interaction codes string-based interaction codes. documentation, often refer actor types using string-based categories (e.g. State Forces Rebel Groups), dataset structures categories using numeric categorization. can find information, including table actor categories correspond numeric codes, ACLED’s codebook. function allows convert numeric codes string-based categories, without time-consuming need writing changes . function requires two arguments: data: ACLED dataset includes inter1 inter2 (only_inter = F). only_inters: Boolean option whether include inter1 inter2, without including interaction. option defaults FALSE, thus including interaction column. function simply returns modified dataframe swapped inter & interaction formats. interaction column, find actor types separated “-”.","code":"acled_transform_interactions(df,                  only_inters = F)"},{"path":"https://acled.github.io/acledR/articles/acled_transformations.html","id":"from-wide-to-long-formats---acled_transform_longer","dir":"Articles","previous_headings":"","what":"2. From wide to long formats - acled_transform_longer()","title":"Transformation of ACLED data","text":"acled_transform_longer() allows switch wide long formats without need make new API call. Typical ACLED data wide format, multiple actors represented row (see API interactive guide detailed explanation). format generally works well interested conducting event-based analyses. However, example, may wish conduct actor-based analyses better suited long data format actor separate row, single event may therefore represented multiple rows. Note wide long formats generic terms specifically referred dyadic monadic data types ACLED documentation (see ACLED endpoint guide). acled_transform_longer() requires two arguments: data: wide format ACLED dataset. type: character vector indicating columns transpose (.e. columns go wide long format). available column options upon ACLED data can transposed : full_actor: Transposes actor columns dataset (actor1, actor2, assoc_actor_1, assoc_actor_2). separate row actor associate actor involved event. generates four new columns: type_of_actor actor, inter_type inter. type_of_actor denotes original column actor found (.e. actor1, actor2, assoc_actor_1, assoc_actor_2), ‘actor’ column simply actor’s name. Similarly, inter actor’s inter code, withinter_type denoting whether code came inter1 inter2 column. main_actors: Transposes actor1 actor2. separate rows main actors . generates two new columns: type_of_act actor. type_of_actor denotes column actor originally found, actor simply name actor. assoc_actors: Transposes assoc_actor_1 assoc_actor_2 columns. separate rows associate actors . generates two new columns: type_of_actor actor. type_of_actor denotes whether actor originally found assoc_actor_1 assoc_actor_2 column, actor simply name associate actor. Note: data still include actor1 actor2 columns. source: Transposes source column. separate row source source column. Keep mind can receive data monadic/longer form directly ACLED’s API, using function can provide added benefits. Specifically: can use function transform dyadic/wide dataset monadic/long dataset, thus receiving latter without executing additional API call. control columns used transforming dataset wide long format. function allows transpose following columns: actor1 & actor2, assoc_actor_1, assoc_actor_2, source. API allows receive long-format data based actor1, actor2, assoc_actor_1, assoc_actor_2, without option control want columns .","code":"acled_transform_longer(data,                  type = \"full_actors\")"},{"path":"https://acled.github.io/acledR/articles/acled_transformations.html","id":"from-long-to-wide-format---acled_transform_wider","dir":"Articles","previous_headings":"","what":"From long to wide format - acled_transform_wider()","title":"Transformation of ACLED data","text":"acledR also offers inverse acled_transform_longer(), allowing pivot dataframe back wider format (dyadic form). function meant aid users may used acled_transform_longer() like return dataframe original state. function similar counterpart: can see, arguments acled_transform_longer(): data: wide format ACLED dataset type: character vector indicating columns transpose (columns go long wide format).","code":"acled_transform_wider(data,                       type = \"full_actors\")"},{"path":"https://acled.github.io/acledR/articles/acled_transformations.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Transformation of ACLED data","text":"section can walk potential use case transformation functions. example, assume interested data “South America” first half 2023. NOTE: email key values examples. provide credentials can create using ACLED’s website. Now data long format one actor per row, can much easily filter data retain events involving “Military Forces Colombia (2022-)”: filtered events 0 rows, meaning 0 events “Military Forces Colombia (2022-)” involved actor associate actor. Instead filtering events involving particular actor, may wish calculate number events actor dataset participates. issue actor may represented four actor columns, simply sum number rows actor appears one particular column. simple solution transform dataset long form calculate event counts actor. can begin using acled_transform_longer() function: dataset now long form row representing single actor single event. can now count number rows actor, grouping unique event_id_cnty. important count rows unique ids transforming data long format, events can represented multiple rows equal number actors involved event. verify results, can filter actor counts “Military Forces Colombia (2022-)”. number events matches number rows got first filtering actor.","code":"library(acledR)  acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") ## Success! Credentials authorized df_sa <- acled_api(regions = \"South America\",                    start_date = \"2023-01-01\",                    end_date = \"2023-06-01\",                    monadic = F,                    acled_access = TRUE,                    prompt = F) ## Requesting data for 13 countries. Accounting for the requested time period and ACLED coverage dates, this request includes approximately 14,693 events. ## Processing API request ## Extracting content from API request mil_colombia <- df_sa %>%   filter(stringr::str_detect(paste(actor1,actor2,assoc_actor_1, assoc_actor_2, sep = \";\"), \"Military Forces of Colombia (2022-)\")) df_sa_long <- acled_transform_longer(df_sa, type = \"full_actors\") ## Be aware, inter1 and inter2 represent the actor type of actor1 and actor2 respectively. library(tidyr) library(dplyr)  actors_df_sa <- df_sa_long %>%   group_by(actor) %>%   summarise(n_events = n_distinct(unique(event_id_cnty))) actors_df_sa %>%   filter(actor == \"Military Forces of Colombia (2022-)\") %>%   .$n_events ## [1] 187"},{"path":"https://acled.github.io/acledR/articles/acled_update.html","id":"keeping-track-of-updates---acled_update","dir":"Articles","previous_headings":"","what":"Keeping track of updates - acled_update()","title":"Keeping your dataset up to date","text":"detailed ACLED’s guide updating dataset, cases events modified deleted, necessitating update downloaded dataset. Unlike deleted events, separate API endpoint check modified events. events modified, timestamp changes reflect timing recent update. means, can find modified events using acledR::acled_api() providing recent timestamp (.e. max({ACLED dataset}$timestamp))) dataset timestamp argument function. event recent timestamp event_id_country event downloaded dataset, event modified. Hence, can remove duplicated event lower timestamp. simplify process, acledR includes function makes update following steps previously explained: acled_update. function following arguments: - df: dataframe update, structure ACLED’s dyadic dataframe (.e. result acled_api()) start_date: first date events want update . celling floor event_date, timestamp. end_date: last date events want update . celling floor event_date, timestamp. additional_countries: Additional countries update dataset. defaults “current countries”, includes countries inside dataset. regions: regions like events dataset updated. event_types: event types like events dataset updated. acled_access: already used acled_access(), can set option TRUE (default) avoid input email access key. email: email registered ACLED’s Access Portal. argument required acled_access = TRUE. key: key registered ACLED’s Access Portal. argument required acled_access = TRUE. deleted: TRUE, addition updating information updated events, function also remove deleted events dataset using ACLED API’s deleted endpoint. prompts: TRUE prompts call suppressed. See acled_api().","code":"acled_update(   df,   additional_countries = NULL,   regions = NULL,   event_types = NULL,   acled_access = TRUE,   email = NULL,   key = NULL,   deleted = TRUE,   prompts = T)"},{"path":"https://acled.github.io/acledR/articles/acled_update.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Keeping your dataset up to date","text":"section can learn use acled_update keep datasets updated. Load downloaded dataset: last time downloaded updated dataset? dataset updated since , may want updated version. , can use acled_update(). interested updating events already dataset, can ignore start_date end_date arguments. also wish remove deleted events dataset can set deleted=TRUE. Now dataset captures modified newly created events. Best luck!","code":"library(acledR) library(lubridate) library(dplyr) acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. ## Success! Credentials authorized argen_dummy_acled_file <- acledR::acled_old_dummy # Here is our old personal ACLED dataset latest_timestamp_unix <- max(argen_dummy_acled_file$timestamp)  latest_timestamp <- as_datetime(latest_timestamp_unix) new_argen_dataset <- acled_update(argen_dummy_acled_file,                                    additional_countries = \"Argentina\",                                    acled_access = T,                                    prompts = FALSE) ## Requesting data for 1 countries. Accounting for the requested time period and ACLED coverage dates, this request includes approximately 350 events. ## Processing API request ## Extracting content from API request ## Dataset updated.  ##  Old number of events: 326.  ##  New events: 1.  ##  Deleted events: 0.  ##  Total new & modified events: 64"},{"path":"https://acled.github.io/acledR/articles/actors_interactions.html","id":"actors","dir":"Articles","previous_headings":"","what":"Actors","title":"Actors and Interactions","text":"ACLED recognizes range actors including state forces, rebels, militias, identity groups, demonstrators, civilians, external forces. ACLED, politically violent actors include government forces affiliates, rebel groups, militias, external private forces (e.g. UN missions) political groups interact issues political authority (e.g. territorial control, government control, access resources, etc.). organised actors official name political purpose, use violence political means. inclusion agents political violence, organizations must cohesive assembled single events, exception riots protests. , events organizations must connected means achieve larger political purpose. necessary sufficient definition actors allows establishment campaigns trajectories movements. Protesters, rioters civilians actors whose inclusion deviates organization armed group rules. Rioters protesters involve spontaneous, atomic acts organization may, may , continue beyond discrete event. Civilians actively choose involved event. name actor noted actor1 actor2 columns dataset. assoc_actor_1 assoc_actor_2 columns record associated groups specific events well identity specific actors. former case, associated group may allies actions, like two armed organized groups engaging attacks common enemy. latter case, assoc_actor_1 assoc_actor_2 columns may record additional information concerning victims attack socio-political affiliation demonstrators ethno-religious identity civilian victim. ‘Explosions/Remote violence’ event intended armed, organized group, also affects civilians, groups noted – primary actor ostensibly intended target, civilians (collateral damage case) associated actor.","code":""},{"path":"https://acled.github.io/acledR/articles/actors_interactions.html","id":"interaction-codes","dir":"Articles","previous_headings":"","what":"Interaction Codes","title":"Actors and Interactions","text":"type group actor referred “interaction codes”. currently 8 categories actors, detailed table . type actor1 recorded inter1 column, inter2 codes type actor2. See complete ACLED Codebook details inter code named data.","code":""},{"path":"https://acled.github.io/acledR/articles/actors_interactions.html","id":"joined-interaction-codes","dir":"Articles","previous_headings":"","what":"Joined Interaction Codes","title":"Actors and Interactions","text":"joined interaction code combination two inter codes associated two main actors. Single actor type codes recorded inter1 inter2 columns, compounded number recorded interaction column. example, country’s military fights political militia group, respective inter1 inter2 codes “1” “3”, respectively, compounded interaction recorded “13”. Interaction numbers always smallest possible number (example, 37 instead 73), regardless order actor1 actor2. Interaction codes recorded events, including non-violent activity. one-sided events, empty second actor category coded “0”. non-violent rebel event occurs inter1 noted “2”, “20” coded interaction column. main actors recorded actor1 actor2 columns basis interaction codes.","code":""},{"path":"https://acled.github.io/acledR/articles/actors_interactions.html","id":"acledr-example","dir":"Articles","previous_headings":"","what":"acledR Example","title":"Actors and Interactions","text":"example actors interactions ACLED, let’s consider Yemen January 2022 using acled_api() function call API (read conflict Yemen ACLED’s Yemen Research Hub): month, length(df_yemen$data_id) ACLED events, length(unique(df_yemen$actor1)) unique actor1 entries, length(unique(df_yemen$actor2)) unique actor2 entries. common actor1 “Operation Restoring Hope”, accounting 50% events. can see “Operation Restoring Hope” coded inter1 = 8, indicating actor falls “External/Forces” category. common actor2 NA 43%, indicating actor2 coded events. next frequent actor2 Military Forces Yemen. Inspecting , see joined interaction column events coded “Sole Action”, mostly activity “Operation Restoring Hope”. Using sub_event_type column tandem actor1 column, see “Operation Restoring Hope” mostly conducted air/drone strikes period.","code":"library(acledR)  acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials.  df_yemen <- acled_api(countries = c(\"Yemen\"),                       start_date = \"2022-01-01\",                       end_date = \"2022-01-31\",                       monadic = F,                       prompt = FALSE) # number of ACLED events df_yemen$event_id_cnty %>% length() #> [1] 902 # number of unique actor1s df_yemen$actor1 %>% unique() %>% length() #> [1] 28 # number of unique actor2s df_yemen$actor2 %>% unique() %>% length() #> [1] 25 df_yemen %>%    janitor::tabyl(actor1) %>%    janitor::adorn_rounding(2) %>%    arrange(-n) %>%    head(5) #>                                     actor1   n percent #>                   Operation Restoring Hope 447    0.50 #>    Military Forces of Yemen (2017-) Houthi 147    0.16 #>                            Giants Brigades 115    0.13 #>  Military Forces of Yemen (2012-2022) Hadi  73    0.08 #>                    West Coast Joint Forces  33    0.04 df_yemen %>%    filter(actor1 == \"Operation Restoring Hope\") %>%    pull(inter1) %>%    unique() #> [1] 8 df_yemen %>%    janitor::tabyl(actor2) %>%    select(-valid_percent) %>%    arrange(-n) %>%    head(5) #>                                     actor2   n    percent #>                                       <NA> 387 0.42904656 #>    Military Forces of Yemen (2017-) Houthi 306 0.33924612 #>                          Civilians (Yemen) 110 0.12195122 #>  Military Forces of Yemen (2012-2022) Hadi  29 0.03215078 #>                            Giants Brigades  24 0.02660754 df_yemen %>%    janitor::tabyl(interaction) %>%    janitor::adorn_rounding(2) %>%    arrange(-n) %>%    head(5) #>  interaction   n percent #>           80 325    0.36 #>           13 154    0.17 #>           18 112    0.12 #>           11  98    0.11 #>           17  54    0.06  df_yemen %>%    filter(actor1 == \"Operation Restoring Hope\") %>%    janitor::tabyl(interaction) %>%    janitor::adorn_rounding(2) %>%   arrange(-n) %>%    head(5) #>  interaction   n percent #>           80 305    0.68 #>           18 105    0.23 #>           78  34    0.08 #>           38   3    0.01 #>                     sub_event_type   n percent #>                   Air/drone strike 423    0.95 #>  Shelling/artillery/missile attack  11    0.02 #>              Disrupted weapons use   4    0.01 #>                             Attack   3    0.01 #>           Change to group/activity   2    0.00"},{"path":[]},{"path":[]},{"path":"https://acled.github.io/acledR/articles/event_types.html","id":"battles","dir":"Articles","previous_headings":"Violent Events","what":"Battles:","title":"Event and Sub-Event Types","text":"ACLED defines battle “violent interaction two politically organized armed groups particular time location.” Battles can occur armed organised state, non-state, external groups, combination therein. fatality minimum necessary inclusion. Although term “battle” may used describe various kinds encounters parties – e.g. “ceasefire broken” – battles must violent events involving least two armed organized actors. One-sided interactions – e.g. reports shots fired air without target – categorized ‘Strategic developments’ (see ). Violence unarmed civilians categorized ‘Violence civilians’, although civilians can also harmed “collateral damage” ‘Battles’ ‘Explosions/Remote violence’ events. harmed event battle explosions, separate civilian-specific event recorded, fatalities, , aggregated “Fatalities” column. specific elements definition therefore follows: violent interaction exchange armed force, use armed force close distance, armed groups capable inflicting harm upon opposing side. Organized armed groups collective actors assumed operating cohesively around agenda, identity, political purpose, using weapons inflict harm. groups frequently designated name stated agenda. following sub-event types associated ‘Battles’ event type designated according outcome battle event: ‘Armed clash’, ‘Government regains territory’, ‘Non-state actor overtakes territory’. Armed clash: armed, organized groups engage battle, reports indicate change territorial control, correct sub-event type ‘Armed clash’. Non-state actor overtakes territory: non-state actor wins control /subdues government forces, /won territory can now act impunity regarded monopoly force within territory, ‘Non-state actor overtakes territory’ correct sub-event type. Short-lived territorial exchanges last one day coded ‘Armed clash’. cases government non-state forces fight many times location non-state group gains control, final territorial acquisition coded ‘Non-state actor overtakes territory’. battles location coded ‘Armed clash’. sub-event can also used note transfer control one non-state group another violence. Government regains territory: sub-event type used describe cases government forces affiliates fighting competing state forces non-state group regain control location. code used re-establishment government control dual non-state violence. Short-lived territorial exchanges last one day coded ‘Armed clash’.","code":""},{"path":"https://acled.github.io/acledR/articles/event_types.html","id":"explosionsremote-violence","dir":"Articles","previous_headings":"Violent Events","what":"Explosions/Remote violence:","title":"Event and Sub-Event Types","text":"ACLED defines ‘Explosions/Remote violence’ “one-sided violent events tool engaging conflict creates asymmetry taking away ability target respond”. tools used instances ‘Explosions/Remote violence’ explosive devices, including, limited , bombs, grenades, improvised explosive devices (IEDs), artillery fire shelling, missile attacks, heavy machine gun fire, air drone strikes, chemical weapons. Suicide attacks implicating use bombs also fall category. instance ‘Explosion/Remote violence’ reported context ongoing battle, merged coded single battle event. ‘Explosions/Remote violence’ can waged armed agents civilians. accounting attacks civilians, explosions/remote violence civilian targets included. following sub-event types associated ‘Explosions/Remote violence’ event type: ‘Chemical weapon’, ‘Air/drone strike’, ‘Suicide bomb’, ‘Shelling/artillery/missile attack’, ‘Remote explosive/landmine/IED’, ‘Grenade’. Chemical weapon: sub-event type coded whenever chemical weapons used warfare absence engagement. ACLED considers chemical weapons substances listed Schedule 1 Chemical Weapons Convention, including sarin gas, mustard gas, chlorine gas, anthrax. Napalm, white phosphorous, well tear gas non-lethal crowd control substances, considered chemical weapons within sub-event type. Air/drone strike: sub-event type coded whenever air drone strikes occurred absence engagement. Please note air--ground attacks fall sub-event type, including attacks helicopters involve exchange fire forces ground. Suicide bomb: sub-event type coded whenever suicide bombing occurs absence engagement (engagement include gun fire armed groups civilians). also includes suicide vehicle-borne improvised explosive device (SVBIED) attacks Shelling/artillery/missile attack: sub-event type coded whenever long-range artillery missile system used absence engagement. also includes attacks described shelling, use artillery either stand-alone tank based, mortars, guided missiles. Planes shot rockets artillery fall sub-event type; unmanned drones shot , however, given human targets, coded interception ‘Disrupted weapons use’ (see ). Similarly, planes shot using rockets artillery fall sub-event type, interception strike (Iron Dome Israel) coded ‘Disrupted weapons use’ well given human targeting. Rocket-propelled grenades (RPGs) coded ‘Shelling/artillery/missile attack’ sub-event type opposed ‘Grenade’ given similarities artillery. Remote explosive/landmine/IED: sub-event type coded whenever remotely- victim-activated devices detonated absence engagement. Examples include landmines, improvised explosive devices (IEDs) whether alone attached vehicle, sort remotely detonated triggered explosive. Unexploded ordinances (UXO) also fall category. Suicide vehicle-borne improvised explosive devices (SVBIED) coded ‘Suicide bomb’ (see ), safe defusal explosive accidental detonation actor planted (casualties reported) coded ‘Disrupted weapons use’ (see ). Grenade: sub-event type used grenade another explosive thrown absence engagement. Events involving “crude bombs” (Molotov cocktails, firecrackers, cherry bombs, petrol bombs, etc.) well ‘stun grenades’ coded category included either ‘Riots’ ‘Strategic developments’ depending context occurred.","code":""},{"path":"https://acled.github.io/acledR/articles/event_types.html","id":"violence-against-civilians","dir":"Articles","previous_headings":"Violent Events","what":"Violence against civilians:","title":"Event and Sub-Event Types","text":"ACLED defines ‘Violence civilians’ violent events organised armed group deliberately inflicts violence upon unarmed non-combatants. definition, civilians unarmed engage political violence. perpetrators acts include state forces affiliates, rebels, militias, external/forces. cases identity actions victims question (e.g. target may employed police officer), ACLED determines person harmed killed unarmed unable either act defensively counter-attack, act ‘Violence civilians’. minimum number civilian fatalities needed qualify ACLED event. ‘Violence civilians’ includes attempts inflicting harm (e.g. beating, shooting, torture, rape, mutilation, etc.) forcibly disappearing (e.g. kidnapping disappearances) civilian actors. following sub-event types associated ‘Violence civilians’ event type: ‘Sexual violence’, ‘Attack’, ‘Abduction/forced disappearance’. Sexual violence: sub-event type used individual (regardless gender) targeted sexual violence. ‘Sexual violence’ defined largely action inflicts harm sexual nature. means limited solely penetrative rape, also include actions like public stripping, sexual torture men, etc. Attack: sub-event type used civilians targeted violence organised armed actor. Attacks sexual nature coded ‘Sexual violence’. Abduction/Forced disappearance: sub-event type used actor engages abduction forced disappearance civilians, without reports violence. fatalities serious injuries reported consequence forced disappearance, event coded ‘Attack’ instead. Note sub-event type cover state-sanctioned arrests, unless reported conducted extra-judicially. contrast, non-state groups can never engage arrests, activity engaging “arresting” typically coded using sub-event type","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/articles/event_types.html","id":"protests","dir":"Articles","previous_headings":"Demonstrations","what":"Protests:","title":"Event and Sub-Event Types","text":"protest defined public demonstration participants engage violence, though violence may used . Events include individuals groups peacefully demonstrate political entity, government institution, policy, group, tradition, businesses private institutions. Events coded protests symbolic public acts displays flags public prayers (unless accompanied demonstration), protests legislatures parliamentary walkouts MPs staying silent, strikes (unless accompanied demonstration), individual acts self-harm actions (e.g. individual immolations hunger strikes). Protesters noted generic terms (e.g. ‘Protesters (Country)’); representing group, name group recorded respective associated actor column. following sub-event types associated ‘Protests’ event type: ‘Peaceful protest’, ‘Protest intervention’, ‘Excessive force protesters’. Peaceful protest: sub-event type used demonstrators engaged protest engaging violence forms rioting behavior faced sort force engagement. Protest intervention: sub-event type used individuals engaged peaceful protest attempt disperse suppress protest without serious/lethal injuries reported targeting protesters lethal weapons. Additionally, sub-event type cover instance armed groups rioters interact peaceful protesters without resulting serious/lethal injuries. Excessive force protesters: sub-event type used individuals engaged peaceful protest targeted violence actor leading (lead ) serious/lethal injuries.","code":""},{"path":"https://acled.github.io/acledR/articles/event_types.html","id":"riots","dir":"Articles","previous_headings":"Demonstrations","what":"Riots:","title":"Event and Sub-Event Types","text":"‘Riots’ violent events demonstrators mobs engage disruptive acts, including limited rock throwing, property destruction, etc. may target individuals, property, businesses, rioting groups armed actors. Rioters noted generic terms (e.g. ‘Rioters (Country)’); representing group, name group recorded respective ‘Associated actor’ column. Rioters may begin peaceful protesters, may intent engaging spontaneous disorganized violence beginning actions. Contrary armed groups, rioters use sophisticated weapons guns, knives swords. “Crude bombs” (e.g. Molotov cocktails, petrol bombs, firecrackers) may used rioting behavior. following sub-event types associated ‘Riots’ event type: ‘Violent demonstration’ ‘Mob violence’. Violent demonstration: sub-event type used group individuals engages demonstration involving violence. Examples rioting behavior include vandalism; road-blocking using barricades, burning tires, material; types violent /destructive behavior also included . Mob violence: sub-event type used rioters violently interact rioters, another armed group civilians, outside demonstrations without use lethal weapons like guns, knives, swords, etc. mob defined “large crowd people, especially one disorderly intent causing trouble violence.” Note type violence can also include (unarmed crudely armed) vigilante mobs clashing armed groups attacking civilians. Vigilante groups crudely armed considered spontaneous mobs rather assumed organized hence included .","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/articles/event_types.html","id":"strategic-developments","dir":"Articles","previous_headings":"Demonstrations > Non-Violent Actions","what":"Strategic Developments:","title":"Event and Sub-Event Types","text":"cases, ACLED also records events broadly categorized “non-violent” differ role inside context. events, coded “strategic Developments” important pieces context may connected future upticks violence, thus included data set provide better understanding given context disorder. Users free visit guide use strategic developments analysis find examples use event type. Strategic Developmets include: Agreements (e.g. Peace agreements / summits) Arrests (e.g. Politically sensitive arrests) Change measures/activity (e.g. mergers splinters violent groups, movement forces, recruitment force, particular security measures) Disrupted weapons use (e.g. Defuseing explosives, ‘ineffective’ detonations, interceptions weapon seizures) Headquarters base established Looting/property destruction (e.g. Land seizure, looting, property destruction) Non-violent transfer territory (e.g. mass graves, displacements, military takeovers, explosive remnants war like cluster bombs mines, elections/referendums)","code":""},{"path":"https://acled.github.io/acledR/articles/event_types.html","id":"acledr-example","dir":"Articles","previous_headings":"","what":"acledR Example","title":"Event and Sub-Event Types","text":"see event types sub-event types look practice, let’s pull data Haiti first months 2022 sing acled_api() function: quick data wrangling dplyr plotting ggplot2, see common event_type violence civilians.  Let’s investigate variation common event_type, violence civilians, breaking sub_event_type month.","code":"library(acledR)  acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials.  df_haiti <- acled_api(countries = c(\"Haiti\"),                    start_date = \"2022-01-01\",                    end_date = \"2022-03-31\",                    monadic = F,                    prompt = FALSE) library(dplyr) library(ggplot2)  # event counts by event_type df_haiti %>%    group_by(event_type) %>%    tally() %>%       # start plotting   ggplot() +   geom_bar(aes(x = forcats::fct_reorder(event_type, n), y = n), # reorder bars by count            stat = \"identity\") +   theme_light() +   # flip the axes   coord_flip() +   # name the axes (opposite because coordinates were flipped)   labs(y = \"Events\", x =  \"Event Type\",        title = \"Event Types in Haiti\",        subtitle = \"January through March 2022\") df_haiti %>%    # filter to only violence against civilians   filter(event_type %in% c(\"Violence against civilians\")) %>%    # create an indicator for month   mutate(month = lubridate::month(event_date, label = T)) %>%    # create counts by sub_event_type-month   group_by(sub_event_type, month) %>%    tally() %>%       # start plotting   ggplot() +   geom_bar(aes(x = month, y = n, fill = sub_event_type),            stat = \"identity\") +   # fill palatte   scale_fill_viridis_d() +   theme_light() +   labs(y = \"Events\", x =  \"Month\",        title = \"Violence Against Civilians in Haiti\",        subtitle = \"January through March 2022\")"},{"path":"https://acled.github.io/acledR/articles/fatalities.html","id":"how-do-we-code-fatalities","dir":"Articles","previous_headings":"","what":"How do we code fatalities?","title":"Fatalities","text":"ACLED researchers triangulate event information across multiple sources, often combining information local media outlets well local partners. ACLED codes conservative fatality estimate available conflict event. Researchers identify reports fatalities rather casualties, casualties may also include injuries. researcher encounters report casualties deaths, ACLED codes event 0 fatalities. ACLED acknowledges approach may underestimate fatalities, consistent methodology provides confidence , precisely accurate cases, fatality estimates conservative therefore expected direction error known. less transparent fatality coding criteria, error associated fatality estimate may either high low. mentioned across ACLED’s methodology, rely media local partners’ reports code fatalities. , reports make mention fatalities, going coded. cases, however, sources may mention fatalities occurred without including actual number. cases occur - researchers unable find complementary information number fatalities - ACLED relies series rules provide estimation fatalities: significant attack, active war zone? yes, fatalities estimated 10. E.g. airstrike dropped building Yemen, resulting unspecified number fatalities. [Yemen war zone airstrike likely yield high casualties] attack limited scope, active war zone? yes, fatalities estimated 3. E.g. bomb explodes checkpoint Afghanistan, resulting deaths. [Afghanistan war zone, yet checkpoints often manned large numbers people] attack outside war zone? yes, fatalities estimated 3. E.g. Inter communal violence Guinea leads number deaths. [Guinea warzone, inter communal violence tends result mass fatalities] significant attack outside war zone? yes, fatalities estimated 10. E.g. large-scale attack Al Shabaab results unspecified number fatalities Kenya. [Kenya war zone, yet large-scale attack involving actor neighboring war zone] purpose, ACLED defines country war zone single group coalition attempting violently challenge legitimacy authority central government, actor active 20% territory - assessment done qualitatively. Conflict zones countries organized political violence, yet reach threshold war zone. Unrest refers protests riots occurring countries may much conflict occurring, yet unrest commonplace. Finally, disorder something affects every country ACLED coverage, refers political violence demonstration events.","code":""},{"path":"https://acled.github.io/acledR/articles/fatalities.html","id":"are-these-fatalities-measures-reliable","dir":"Articles","previous_headings":"","what":"Are these fatalities measures reliable?","title":"Fatalities","text":"mentioned , coding fatalities speaking estimations. Thus, always room new information appear change measure. cases, ACLED modifies events data set reflect new information. time, ACLED’s efforts provide conservative estimate gives additional layer reliability, measures included backed sources region.","code":""},{"path":"https://acled.github.io/acledR/articles/fatalities.html","id":"how-does-acled-deal-with-uncertainty","dir":"Articles","previous_headings":"","what":"How does ACLED deal with uncertainty?","title":"Fatalities","text":"reason refer fatalities estimates, always degree uncertainty. Tracking reporting fatalities active conflict zone events -going multi-faceted complicated issue, actors may opt report losses victims attacks, civilians may readily available report fatalities. Hence, simple increasing number sources used code fatalities, cases may enough, others may enough reliable sources given bias - bias either report report. order address short comings, ACLED develops regionally tailor-made approaches finding information given region. Contrary just increasing number sources (may just add even biases worsen quality information - quantity doesn’t ensure quality), ACLED aims generate particular source combinations reflect reality disorder fatalities counts space. Generally, ACLED prioritizes local sources’ reports, local partners sub national media, tend avoid sensationalization lethality often occurs English language media.","code":""},{"path":"https://acled.github.io/acledR/articles/fatalities.html","id":"acledr-example","dir":"Articles","previous_headings":"","what":"acledR Example:","title":"Fatalities","text":"order demonstrate use fatalities columns, look fatalities violence civilians across 2021 2022 (first half August). Lets now explore fatalities within data set. can see, fatalities part concentrated 0 1, average 1.21 fatalities per event. noticeable aspect, like go beyond . set categories tenths. Now better understanding fatalities data set distributed, lets look evolution across 2021 2022.  graph, can observe peak number fatalities March 2022. go slightly -depth, let’s explore countries saw highest difference compared prior month.  Interestingly, see Mali Ukraine top countries making contributions new peak fatalities, two countries biggest uptick fatalities March 2022 compared February. reader saw peak previous line chart, one may swiftly explained outbreak Russian invasion Ukraine late February. However, missed uptick violence Mali Malian Wagner forces (see analysis information).","code":"df_years %>%    janitor::tabyl(fatalities) %>%    janitor::adorn_rounding(2) %>%    arrange(-n) %>%    head(5) ##  fatalities     n percent ##           1 24280    0.46 ##           0 19637    0.37 ##           2  4438    0.08 ##           3  1841    0.03 ##           4   747    0.01 summary(df_years$fatalities) ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##   0.000   0.000   1.000   1.206   1.000 400.000 df_fatalities <- df_years %>%   mutate(fatalities_bins = case_when(     fatalities > 0 & fatalities <11 ~ \"1 to 10\",     fatalities > 10 & fatalities <101 ~ \"11 to 100\",     fatalities > 101 & fatalities <1001 ~ \"101 to 1000\",     TRUE ~ \"0\"   ))  df_fatalities %>%   janitor::tabyl(fatalities_bins) %>%   janitor::adorn_rounding(2)%>%   arrange(-n) ##  fatalities_bins     n percent ##          1 to 10 32542    0.62 ##                0 19637    0.37 ##        11 to 100   503    0.01 ##      101 to 1000    14    0.00 df_fatalities_monthly <- df_fatalities %>%   group_by(Month = floor_date(ymd(event_date), \"month\")) %>%   summarise(fatalities_sum = sum(fatalities))  ggplot(df_fatalities_monthly,              aes(x = Month, y = fatalities_sum)) +      geom_line(color = \"navy\") +   labs(title = \"Total of fatalities per month\",        subtitle = \"Jan 2021-Aug 2022\",        x = \"Year-Month\",        y = \"Sum of fatalities\") +   theme_light() df_fatalities_monthly_country <- df_fatalities %>%   group_by(Month = floor_date(ymd(event_date), \"month\"), country) %>%   summarise(fatalities_sum = sum(fatalities)) %>%   filter(Month < ymd(\"2022-04-01\") & Month > ymd(\"2022-01-01\")) %>%   arrange(country) %>%   group_by(country) %>%   summarise(difference = diff(fatalities_sum))%>%   arrange(-difference) %>%   filter(difference != 0) ## We are filtering out those countries which didn't change to make a more polished graph.   ggplot(df_fatalities_monthly_country,         aes(y = reorder(country, difference), x = difference)) +   geom_col() +   labs(title = \"Difference in total fatalities per country \",        subtitle = \"February versus March 2022\",        x = \"Total difference in fatalities\",        y = \"Countries\") +   theme_light() +   # theme(panel.grid = element_blank()) +   coord_cartesian(expand = F)"},{"path":"https://acled.github.io/acledR/articles/geography.html","id":"administrative-levels","dir":"Articles","previous_headings":"","what":"Administrative Levels","title":"Geography","text":"mentioned , ACLED’s data set includes six different types spatial information. , administrative levels included, stored columns Admin1, Admin2 Admin3. columns provide information users location event, making easier triangulate locate particular event, well allow analysis across regions, e.g. events moved one region another throughout range time. Administrative levels generally composed followed (examples parenthesis refer Ethiopia / US): Administrative Level 1 (Admin 1): Province Equivalent (e.g. Afar / California)) Administrative Level 2 (Admin 2): District Equivalent. (e.g. Kilbati-Zone 2 / San Diego ) Administrative Level 3 (Admin 3): County Equivalent. (e.g. Abaala) However, administrative levels hardly uniform topic across conflict studies. Administrative levels vary, cases, information administrative levels becomes unreliable, especially Admin 3 level. instance, covering certain countries Africa, administrative levels may change, cases, locations small cities always covered. Additionally, sources may utilize different names, sometimes resulting language dialect variations, names administrative levels may unique. Furthermore, every country defines sub-national boundaries way, thus, many countries Africa include Admin 3s, countries Europe often don’t. account differences, ACLED researchers instructed : Follow sources report terms location. sources incomplete information location, researchers triangulate information following landmarks relevant information mentioned source, utilize precision code (see ) denote . sources include administrative levels part standardized list administrative levels ACLED, researchers allowed include new entries master list checking OpenStreetMap, Google Maps NGA GeoNames database. approach allows standardized way coding events’ locations, often issue covering events around world. However, users utilize different names administrative levels, sometimes occurs humanitarian-related data sets, important take differences consideration. moment, data set include P-Codes. However, include ISO column allow easier connection data sets.","code":""},{"path":"https://acled.github.io/acledR/articles/geography.html","id":"precision-codes","dir":"Articles","previous_headings":"","what":"Precision Codes","title":"Geography","text":"often sources different degrees certainty regarding event occurring particular location. instance, sources may report event “near 66 highway near City X”, others may report “event occurred town hall city X along 66 highway”. example, can see two different degrees precision. distinguish different degrees precision, case time, ACLED utilizes different “Precision Codes”. follow:","code":""},{"path":"https://acled.github.io/acledR/articles/geography.html","id":"acledr-example","dir":"Articles","previous_headings":"","what":"acledR Example","title":"Geography","text":"example explore events distribution January 2022 across Nigeria utilizing ACLED’s administrative level columns. start pulling data ACLED’s API. First, call acled_acess(), make API call acled_api(). Lets explore top 5 admin1s Nigeria (also called states). observed table, Kaduna Borno two conflict-ridden admin1s Nigeria, however, conflicts appears generally evenly distributed . Lets plot geographical distribution: Given fact every event comes paired number geographical variables, ACLED’s data particularly useful map conflict given region, country, administrative level. see … vignitte (put link ), can go even map conflict given administrative level thanks .","code":"library(acledR) acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. df_nigeria <- acled_api(countries = c(\"Nigeria\"),                         start_date = \"2022-01-01\",                         end_date = \"2022-01-31\",                         monadic = F,                         acled_access = T,                         prompt = FALSE) df_nigeria %>%    janitor::tabyl(admin1) %>%    janitor::adorn_rounding(2) %>%    arrange(-n) %>%    head(5)  #>   admin1  n percent #>    Borno 47    0.11 #>   Kaduna 40    0.09 #>    Niger 32    0.07 #>  Zamfara 31    0.07 #>  Katsina 23    0.05 library(sf) library(ggplot2)  # grab admin1 level shapefile for Nigeria via the raster package admin1_nigeria <- raster::getData(name = \"GADM\", country = \"Nigeria\", level = 1) %>%    # convert to sf object   st_as_sf()  # generate admin1 level counts and join to sf object of admin1s df_nigeria_admin1_counts <-   df_nigeria %>%    group_by(admin1) %>%    tally() %>%    left_join(admin1_nigeria, by = c(\"admin1\" = \"NAME_1\")) %>%    st_as_sf()  # start plotting ggplot() +   geom_sf(data = df_nigeria_admin1_counts,            aes(fill = n),           color = \"white\") +   geom_sf_text(data = df_nigeria_admin1_counts %>%                   arrange(-n) %>%                   head(5),                 aes(fill = n, label = admin1),                color = \"gray10\") +   scale_fill_viridis_c(option = \"inferno\",                        guide = guide_colorbar(title = \"Event count\")) +   coord_sf() +   theme_minimal() +   labs(x = \"Longitude\",        y = \"Latitude\",         title = \"ACLED Events across Nigeria\",        subtitle = \"January 2022\")"},{"path":"https://acled.github.io/acledR/articles/get_started.html","id":"authenticating-your-credentials","dir":"Articles","previous_headings":"","what":"Authenticating your credentials","title":"Get Started","text":"able access API, users require API key. registered ACLED’s Access portal, can visit . like detail guide create account get API, can utilize ACLED’s Access Guide registered, encourage save credentials authenticate acled_access(). function allows test credentials working intended, save enviorment, turn allows users avoid input credentials every time request API. authentication successfull, find message console stating “Authorisation accepted”.","code":"acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. #> Success! Credentials authorized"},{"path":"https://acled.github.io/acledR/articles/get_started.html","id":"requesting-data-from-acled-api","dir":"Articles","previous_headings":"","what":"Requesting data from ACLED API","title":"Get Started","text":"credentials authenticated, users can easily start requesting data API. , can use acled_api() function. function requires fields gather data . Thus, example going request data Argentina throughout 2022. example utilized three arguments (countries, start_date end_date), acled_api() features number arguments regions, timestamp, event_types, . can find vignette(\"acled_api\"). Additionally, due fact authenticated credentials , required input function. Otherwise, didn’t utilize acled_access() required input email key. Finally, acled_api allows gather vast amounts data API, however, make big calls data, need segment calls multiple smaller ones. Thus, function includes prompt paramenter set TRUE FALSE. TRUE, utilizing function, receive message number API calls require (important aspect consider limited number calls), confirmation want request data. Alternatively, marked FALSE, receive prompt. data receive, data frame events throughout request dates requested region/country. can inspect Argentinian data gather now.","code":"argentinian_data <- acled_api(countries = \"Argentina\", start_date=\"2022-01-01\",end_date = \"2022-12-31\", prompt=F) #> Requesting data for 1 countries. Accounting for the requested time period and ACLED coverage dates, this request includes approximately 4,258 events. #> Processing API request #> Extracting content from API request #> Rows: 2,677 #> Columns: 31 #> $ event_id_cnty      <chr> \"ARG12068\", \"ARG11964\", \"ARG11965\", \"ARG12064\", \"AR… #> $ event_date         <date> 2022-12-31, 2022-12-30, 2022-12-30, 2022-12-30, 20… #> $ year               <dbl> 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 202… #> $ time_precision     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ disorder_type      <chr> \"Political violence\", \"Demonstrations\", \"Demonstrat… #> $ event_type         <chr> \"Violence against civilians\", \"Protests\", \"Protests… #> $ sub_event_type     <chr> \"Attack\", \"Peaceful protest\", \"Peaceful protest\", \"… #> $ actor1             <chr> \"Police Forces of Argentina (2019-)\", \"Protesters (… #> $ assoc_actor_1      <chr> NA, \"Health Workers (Argentina)\", NA, \"Labor Group … #> $ inter1             <dbl> 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 6, 6, 6, … #> $ actor2             <chr> \"Civilians (Argentina)\", NA, NA, NA, NA, NA, NA, NA… #> $ assoc_actor_2      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ inter2             <dbl> 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, … #> $ interaction        <dbl> 17, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,… #> $ civilian_targeting <chr> \"Civilian targeting\", NA, NA, NA, NA, NA, NA, NA, N… #> $ iso                <dbl> 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,… #> $ region             <chr> \"South America\", \"South America\", \"South America\", … #> $ country            <chr> \"Argentina\", \"Argentina\", \"Argentina\", \"Argentina\",… #> $ admin1             <chr> \"Buenos Aires\", \"Chubut\", \"Santa Fe\", \"San Juan\", \"… #> $ admin2             <chr> \"Moreno\", \"Rawson\", \"Caseros\", \"Capital\", NA, NA, \"… #> $ admin3             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ location           <chr> \"La Reja\", \"Rawson\", \"Casilda\", \"San Juan\", \"Buenos… #> $ latitude           <dbl> -34.6397, -43.2993, -33.0441, -31.5347, -34.6141, -… #> $ longitude          <dbl> -58.8294, -65.0935, -61.1642, -68.5303, -58.4579, -… #> $ geo_precision      <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ source             <chr> \"La Nacion (Argentina)\", \"Diario Cronica (Argentina… #> $ source_scale       <chr> \"National\", \"National\", \"Subnational\", \"Subnational… #> $ notes              <chr> \"On 31 December 2022, in La Reja (Buenos Aires), a … #> $ fatalities         <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ tags               <chr> NA, \"crowd size=no report\", \"crowd size=no report\",… #> $ timestamp          <dbl> 1693414514, 1673295342, 1673295342, 1673295342, 167…"},{"path":"https://acled.github.io/acledR/articles/get_started.html","id":"transforming-the-data-from-the-api","dir":"Articles","previous_headings":"","what":"Transforming the data from the API","title":"Get Started","text":"cases may prefer fit data different format default wide-form output received API call. cases offer users two functions: acled_filter_actors() acled_transform_longer. first , acled_filter_actors(), attempts help users filter events actors involved, four columns include actors. simple filter operation, can easily done tidyverse packages, case ACLED data, actors maybe four columns, cases associated actors multiple, actor maybe found inside one cell along multiple others. Thus, acled_filter_actors() particularly useful work acled_data. instance, interested thje events Argentinian Police Forces involved: Finally, considering ACLED data structured wide-form, may use users data long-form instead. users interested ACLED monadic data, can opt make API call monadic option set TRUE, however, standalone call. users interested getting data dyadic form, entail another independent call. Thus, may useful users request data normal, make transformation making API call, without utilizing API calls limited quota. cases, users can utilize acled_transform_longer(). example going transform data long-form based actor column: new data frame, longer four actor columns (actor1,actor2,assoc_actor1,assoc_actor2), instead 1 actor column, one row per actor.","code":"arg_pf <- acled_filter_actors(argentinian_data,  # data                         \"Police Forces of Argentina (2019-)\", # actors we are interested on                         filter_cols = \"all\") # where we want to filter   head(arg_pf) #> # A tibble: 6 × 31 #>   event_id_cnty event_date  year time_precision disorder_type      event_type    #>   <chr>         <date>     <dbl>          <dbl> <chr>              <chr>         #> 1 ARG12068      2022-12-31  2022              1 Political violence Violence aga… #> 2 ARG11985      2022-12-22  2022              1 Demonstrations     Protests      #> 3 ARG11971      2022-12-20  2022              1 Political violence Riots         #> 4 ARG12031      2022-12-13  2022              1 Political violence Riots         #> 5 ARG12005      2022-12-11  2022              1 Political violence Riots         #> 6 ARG11872      2022-12-02  2022              1 Demonstrations     Protests      #> # ℹ 25 more variables: sub_event_type <chr>, actor1 <chr>, assoc_actor_1 <chr>, #> #   inter1 <dbl>, actor2 <chr>, assoc_actor_2 <chr>, inter2 <dbl>, #> #   interaction <dbl>, civilian_targeting <chr>, iso <dbl>, region <chr>, #> #   country <chr>, admin1 <chr>, admin2 <chr>, admin3 <lgl>, location <chr>, #> #   latitude <dbl>, longitude <dbl>, geo_precision <dbl>, source <chr>, #> #   source_scale <chr>, notes <chr>, fatalities <dbl>, tags <chr>, #> #   timestamp <dbl> arg_long <- acled_transform_longer(argentinian_data, # data                             type = \"full_actors\") # The type of operation we want to do to transform the data #> Be aware, inter1 and inter2 represent the actor type of actor1 and actor2 respectively.  glimpse(arg_long) #> Rows: 13,517 #> Columns: 29 #> $ event_id_cnty      <chr> \"ARG12068\", \"ARG12068\", \"ARG12068\", \"ARG12068\", \"AR… #> $ event_date         <date> 2022-12-31, 2022-12-31, 2022-12-31, 2022-12-31, 20… #> $ year               <dbl> 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 202… #> $ time_precision     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ disorder_type      <chr> \"Political violence\", \"Political violence\", \"Politi… #> $ event_type         <chr> \"Violence against civilians\", \"Violence against civ… #> $ sub_event_type     <chr> \"Attack\", \"Attack\", \"Attack\", \"Attack\", \"Peaceful p… #> $ type_of_actor      <chr> \"actor1\", \"actor2\", \"assoc_actor_1\", \"assoc_actor_2… #> $ actor              <chr> \"Police Forces of Argentina (2019-)\", \"Civilians (A… #> $ inter_type         <chr> \"inter1\", \"inter2\", \"inter1\", \"inter2\", \"inter1\", \"… #> $ inter              <dbl> 1, 7, 1, 7, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, … #> $ interaction        <dbl> 17, 17, 17, 17, 60, 60, 60, 60, 60, 60, 60, 60, 60,… #> $ civilian_targeting <chr> \"Civilian targeting\", \"Civilian targeting\", \"Civili… #> $ iso                <dbl> 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,… #> $ region             <chr> \"South America\", \"South America\", \"South America\", … #> $ country            <chr> \"Argentina\", \"Argentina\", \"Argentina\", \"Argentina\",… #> $ admin1             <chr> \"Buenos Aires\", \"Buenos Aires\", \"Buenos Aires\", \"Bu… #> $ admin2             <chr> \"Moreno\", \"Moreno\", \"Moreno\", \"Moreno\", \"Rawson\", \"… #> $ admin3             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ location           <chr> \"La Reja\", \"La Reja\", \"La Reja\", \"La Reja\", \"Rawson… #> $ latitude           <dbl> -34.6397, -34.6397, -34.6397, -34.6397, -43.2993, -… #> $ longitude          <dbl> -58.8294, -58.8294, -58.8294, -58.8294, -65.0935, -… #> $ geo_precision      <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ source             <chr> \"La Nacion (Argentina)\", \"La Nacion (Argentina)\", \"… #> $ source_scale       <chr> \"National\", \"National\", \"National\", \"National\", \"Na… #> $ notes              <chr> \"On 31 December 2022, in La Reja (Buenos Aires), a … #> $ fatalities         <dbl> 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ tags               <chr> NA, NA, NA, NA, \"crowd size=no report\", \"crowd size… #> $ timestamp          <dbl> 1693414514, 1693414514, 1693414514, 1693414514, 167…"},{"path":"https://acled.github.io/acledR/articles/time.html","id":"precision-codes","dir":"Articles","previous_headings":"","what":"Precision Codes","title":"Time","text":"mentioned , recording event’s dates ACLED utilizes different precision codes, stored time_precision column, highlight accurate date . precision codes assigned follows: 1. sources include actual date event, time precision code “1” recorded. 2. sources note event happened specific week weekend, time precision equals “2” middle week (weekend) used reference date. 3. sources note event took place within particular month, without reference particular date, month’s mid-point chosen event_date unless beginning end month noted (case, first last date used, respectively) “3” noted time_precision.","code":""},{"path":"https://acled.github.io/acledR/articles/time.html","id":"acled-week-and-acledr","dir":"Articles","previous_headings":"","what":"ACLED Week and acledR","title":"Time","text":"ACLED’s week like “normal” weeks, follow submission process project. means ACLED’s week starts Saturday, finishes Friday. matter, current future functions project utilize range (Sat-Fri) define constitutes week. reason decision lies efforts team ACLED avoid pitfalls analyse ACLED data. researchers like use “normal” week (Monday-Sunday), aware data collection ACLED occurs Saturday, thus, may incomplete data proceeding week.","code":""},{"path":"https://acled.github.io/acledR/articles/time.html","id":"acledr-example","dir":"Articles","previous_headings":"","what":"acledR Example","title":"Time","text":"explore uses time ACLED’s data, can look following example analyzing France’s events throughout 2021. Now gathered data, want explore precise event dates floor celling date (min/max) data frame. can see, data precise, 99% time_precision 1, followed time_precision 2, finally time_precision 3. follows efforts ACLED precise managing dates, make best effort find date event. rare find data set time_precision 2 present, let alone time_precision 3. Next move one best analysis can ACLED’s data, time-series.  One things interested looking first number events per day France throughout 2021. see plot, throughout moments year number appears spike - like 1st May 183 events - trend line remains fairly stable. ACLED’s data particularly fitted precise use dates means can continuous monitoring given country throughout time. However, like go slightly specific, looking divergence across months. Basically, want explore, volatile month.  can see May 2021 month hosting biggest number events, 1024. hardly surprise, considering also 1st May saw highest number daily events. However, interesting perhaps next highest peak March, April 4th highest peak, perhaps clash previous daily analysis showed. previous plot one get impression latter months volatile (notable peaks days prior May). Lets try add nuance analysis, lets analyse count different event_types across months. can see graph, France’s 2021 primarily riddled protests. However, hardly enough conclude anything France. another vignette go example compare regional averages.","code":"acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #  This is an example, you will need to input your credentials. df_france <- acled_api(countries = c(\"France\"),                        start_date = \"2021-01-01\",                        end_date = \"2021-12-31\",                        monadic = F,                        prompt = FALSE) df_france %>%    janitor::tabyl(time_precision) %>% # Summarize data groupped by time_precision   janitor::adorn_rounding(2) #>  time_precision    n percent #>               1 8633    0.99 #>               2   43    0.00 #>               3    4    0.00  paste0(\"Earliest Date: \", as.character(min(df_france$event_date))) #> [1] \"Earliest Date: 2021-01-01\" paste0(\"Latest Date: \",  as.character(max(df_france$event_date))) #> [1] \"Latest Date: 2021-12-31\" df_france %>%    group_by(event_date) %>%    tally() %>%    ggplot(aes(x = event_date, y = n)) +   geom_point() +   geom_smooth()+   theme_light() +   labs(x = \"Event Date\",        y = \"Events per Day\",        title = \"ACLED Events in France\",        subtitle = \"January through December 2021\") df_france %>%    group_by(month = lubridate::floor_date(event_date, \"month\",                                          week_start = getOption('lubridate.week.start', 6))) %>%    tally() %>%    ggplot(aes(x = month, y = n)) +   geom_line(size=1.2)+   # geom_bar(stat = \"identity\") +   theme_light() +   labs(x = \"Event Date\",        y = \"Events per Day\",        title = \"ACLED Events in France\",        subtitle = \"January through December 2021\") french_counts <- acled_generate_counts(df_france,                                  unit_id = \"country\",                                  time_id = \"event_date\",                                  time_target = \"month\")%>%   select(-country) %>%   pivot_longer(!event_month,                names_to = \"event_type\",                values_to = \"n_events\")   ggplot(french_counts,                aes(x = event_month, y = n_events,                    fill = event_type, text = event_type))+   geom_bar(stat = \"identity\",            position = \"dodge\")+   labs(title = \"Monthly distribution of event types in France\",        x = \"Months\",        y =\"Number of events\")"},{"path":"https://acled.github.io/acledR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Trey Billing. Author. Lucas Fagliano. Author. Rachel Goodman. Author. Katayoun Kishi. Author. Michael Start. Author. ACLED. Copyright holder, maintainer.","code":""},{"path":"https://acled.github.io/acledR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Billing T, Fagliano L, Goodman R, Kishi K, Start M (2023). acledR: Manipulate 'ACLED' Data. https://github.com/billingtt/acledR, https://billingtt.github.io/acledR/, https://acled.github.io/acledR/.","code":"@Manual{,   title = {acledR: Manipulate 'ACLED' Data},   author = {Trey Billing and Lucas Fagliano and Rachel Goodman and Katayoun Kishi and Michael Start},   year = {2023},   note = {https://github.com/billingtt/acledR, https://billingtt.github.io/acledR/, https://acled.github.io/acledR/}, }"},{"path":[]},{"path":"https://acled.github.io/acledR/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Manipulate ACLED Data","text":"package provides tools extract manipulate data Armed Conflict Location Event Data Project (ACLED). access ACLED data, please register account developer.acleddata.com. can visit guide easily set ACLED account. recommend save ACLED API Key R object can easily re-use key.","code":""},{"path":"https://acled.github.io/acledR/index.html","id":"installation-for-private-repo","dir":"","previous_headings":"","what":"Installation (for private repo)","title":"Manipulate ACLED Data","text":"Since package repo currently private, need tell R Github ’re collaborator. , first create Github personal access token (PAT). can set expire certain time (default) permanent. can initiate process internally via: ’ve copied PAT browser, return R run , store PAT locally. recommend also setting PAT .Rprofile ’s stored R sessions (.e., don’t save PAT paste time re-install). Now can install package automatically locate PAT.","code":"# install.packages(\"usethis\") if not installed already # create personal access token - this should redirect to your github page where you can copy the token usethis::create_github_token() # paste the token where it says YourPAT credentials::set_github_pat(\"YourPAT\") # if you run this, it should print your token; if not we've failed Sys.getenv(\"GITHUB_PAT\") # to set your PAT for all R sessions, run file.edit(file.path(\"~\", \".Rprofile\")) # and then paste credentials::set_github_pat(\"YourPAT\") into the .Rprofile script # save the file # install from github devtools::install_github(\"billingtt/acledR\")"},{"path":"https://acled.github.io/acledR/index.html","id":"installation-for-public-use","dir":"","previous_headings":"","what":"Installation (for public use)","title":"Manipulate ACLED Data","text":"acledR package gets added Comprehensive R Archive Network (CRAN), users can utilize devtools install package Github. Thankfully, installation rather simple. can install following code:","code":"devtools::install_github(\"billingtt/acledR\") ## if you are interested in a particular branch, please add a 'ref' argument."},{"path":"https://acled.github.io/acledR/reference/acledR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"acledR: Manipulate 'ACLED' Data — acledR-package","title":"acledR: Manipulate 'ACLED' Data — acledR-package","text":"package allows users easily interact 'ACLED' data providing wrappers API functions manipulate 'ACLED' data.","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acledR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"acledR: Manipulate 'ACLED' Data — acledR-package","text":"Maintainer:  ACLED data@acleddata.com [copyright holder] Authors: Trey Billing t.billing@acleddata.com Lucas Fagliano l.fagliano@acleddata.com Rachel Goodman r.goodman@acleddata.com Katayoun Kishi k.kishi@acleddata.com Michael Start m.start@acleddata.com","code":""},{"path":"https://acled.github.io/acledR/reference/acled_access.html","id":null,"dir":"Reference","previous_headings":"","what":"Store your ACLED access information into your session. — acled_access","title":"Store your ACLED access information into your session. — acled_access","text":"Simple function store (Sys.setenv() ) ACLED access key acled_api() function. email key stored via acled_access, email key arguments acled_api can NULL.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store your ACLED access information into your session. — acled_access","text":"","code":"acled_access(email, key)"},{"path":"https://acled.github.io/acledR/reference/acled_access.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store your ACLED access information into your session. — acled_access","text":"email email register ACLED Access portal (https://developer.acleddata.com/) key key generated ACLED Access portal.","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_access.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store your ACLED access information into your session. — acled_access","text":"","code":"if (FALSE) { acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") Sys.getenv(\"acled_email\") Sys.getenv(\"acled_key\") }"},{"path":"https://acled.github.io/acledR/reference/acled_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Request data from ACLED API — acled_api","title":"Request data from ACLED API — acled_api","text":"function allows users easily request data ACLED API. Users can include variables countries, regions, dates interest type file (monadic dyadic). function returns tibble desired ACLED events.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request data from ACLED API — acled_api","text":"","code":"acled_api(   email = NULL,   key = NULL,   countries = NULL,   regions = NULL,   start_date = floor_date(Sys.Date(), \"year\") - years(1),   end_date = Sys.Date(),   timestamp = NULL,   event_types = NULL,   monadic = FALSE,   ...,   acled_access = TRUE,   prompt = TRUE,   log = F )"},{"path":"https://acled.github.io/acledR/reference/acled_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request data from ACLED API — acled_api","text":"email character string. Email associated ACLED account registered https://developer.acleddata.com. key character string. Access key associated ACLED account registered https://developer.acleddata.com. countries character vector. Default NULL, return events countries. Pass vector country names retrieve events specific countries. list ACLED country names may found via acledR::acled_countries. regions vector region names (character) region codes (numeric). Default NULL, return events regions.  Pass vector regions names codes retrieve events countries within specific regions. list ACLED regions may found via acledR::acled_regions. start_date character string. Format 'yyyy-mm-dd'. earliest date return events. default 1997-01-01, earliest date available. end_date character string. Format 'yyyy-mm-dd'. latest date return events. default Sys.Date(), present date. timestamp numerical character string. Provide date datetime written either character string yyyy-mm-dd numeric Unix timestamp access events added updated date. event_types vector one event types (character). Default NULL, return data event types. reurn data specific event types, request one following options (case sensitive): Battles, Violence civilians, Protests, Riots, Strategic Developments, Explosions/Remote violence. monadic logical. FALSE (default), returns dyadic data. TRUE, returns monadic actor1 data. ... string. additional parameters users like add API calls (e.g. interaction ISO) acled_access logical. TRUE (default), used acled_access function email key arguments required. prompt logical. TRUE (default), users receive interactive prompt providing information call (countries requested, number country-days, number API calls required) asking want proceed call. FALSE, call continues without warning, call split returns message specifying many calls made. log logical. TRUE, provides dataframe countries days requested, many calls entails. dataframe provided INSTEAD normal ACLED dataset.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request data from ACLED API — acled_api","text":"Returns tibble ACLED events.","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Request data from ACLED API — acled_api","text":"","code":"if (FALSE) {  # Get all the events coded by ACLED in Argentina from 01/01/2022 until 02/01/2022 # in dyadic-wide form argen_acled <- acled_api(email = jane.doe.email, key = jane.doe.key,                         countries = \"Argentina\", start_date = \"2022-01-01\", end_date=\"2022-02-01\",                         acled_access = FALSE)  # tibble with all the events from Argentina where each row is one event. argen_acled  # Get all events coded by ACLED in the Caribbean from 01/01/2022 to 10/01/2022 # in monadic-long form using email and key saved in environment  acled_access(email = \"jane.doe.email\", key = \"jane.doe.key\") carib_acled <- acled_api(regions = \"Caribbean\", start_date = \"2022-01-01\",                          end_date=\"2022-01-10\", monadic=TRUE, acled_access = TRUE)  ## Tibble with all the events from the Caribbean where each row is one actor carib_acled }"},{"path":"https://acled.github.io/acledR/reference/acled_codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Codebook — acled_codebook","title":"ACLED Codebook — acled_codebook","text":"Codebook ACLED data","code":""},{"path":"https://acled.github.io/acledR/reference/acled_codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Codebook — acled_codebook","text":"","code":"acled_codebook"},{"path":"https://acled.github.io/acledR/reference/acled_codebook.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Codebook — acled_codebook","text":"data frame: Variable Variable names Description Text description variable Values Text description values variable","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Countries — acled_countries","title":"ACLED Countries — acled_countries","text":"ACLED country names, regions, coding start year","code":""},{"path":"https://acled.github.io/acledR/reference/acled_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Countries — acled_countries","text":"","code":"acled_countries"},{"path":"https://acled.github.io/acledR/reference/acled_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Countries — acled_countries","text":"data frame: country Country names region Region names start_year First year coded ACLED","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_deletions_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Request data from the ACLED Deletions API — acled_deletions_api","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"function allows users pull deleted ACLED event IDs Deletions API.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_deletions_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"","code":"acled_deletions_api(   email = NULL,   key = NULL,   date_deleted = NULL,   acled_access = TRUE,   log = F )"},{"path":"https://acled.github.io/acledR/reference/acled_deletions_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"email character string. Email associated ACLED account registered https://developer.acleddata.com. key character string. Access key associated ACLED account registered https://developer.acleddata.com. date_deleted character string. Format 'yyyy-mm-dd' Unix timestamp. query return deleted events including requested date/timestamp. acled_access logical. TRUE means utilized acled_access function need email key arguments. log testing purposes: can use check variables call handled properly.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_deletions_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"Returns tibble ACLED data columns event_id_cnty deleted_timestamp.","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_deletions_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"","code":"if (FALSE) {  # Request deleted ACLED events since January 1, 2022 acled_deletions_api(date_deleted = \"2022-01-01\", acled_acess = TRUE)  }"},{"path":"https://acled.github.io/acledR/reference/acled_event_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Event Categories — acled_event_categories","title":"ACLED Event Categories — acled_event_categories","text":"ACLED event sub-event types, grouped category","code":""},{"path":"https://acled.github.io/acledR/reference/acled_event_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Event Categories — acled_event_categories","text":"","code":"acled_event_categories"},{"path":"https://acled.github.io/acledR/reference/acled_event_categories.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Event Categories — acled_event_categories","text":"data frame: event_type ACLED event type sub_event_type ACLED sub-event type political_violence Dummy indicator whether sub-event type falls within political violence organized_political_violence Dummy indicator whether sub-event type falls within organized political violence disorder Dummy indicator whether sub-event type falls within disorder demonstrations Dummy indicator whether sub-event type falls within demonstrations","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_filter_actors.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter ACLED Data by Actor — acled_filter_actors","title":"Filter ACLED Data by Actor — acled_filter_actors","text":"function allows users filter ACLED data actor.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_filter_actors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter ACLED Data by Actor — acled_filter_actors","text":"","code":"acled_filter_actors(df, actors, filter_cols = \"all\")"},{"path":"https://acled.github.io/acledR/reference/acled_filter_actors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter ACLED Data by Actor — acled_filter_actors","text":"df dataframe. ACLED data filter. actors character vector vector character strings. Actor name list actor names use filtering. filter_cols character string. Columns use filtering. Default \"\", filters based actor columns (.e. actor1, actor2, assoc_actor_1, assoc_actor_2). \"Primary\" filters based actor1 actor2 column .","code":""},{"path":"https://acled.github.io/acledR/reference/acled_filter_actors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter ACLED Data by Actor — acled_filter_actors","text":"Returns tibble ACLED data filtered selected actors.","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_filter_actors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter ACLED Data by Actor — acled_filter_actors","text":"","code":"if (FALSE) {  # Request events from Yemen df_events <- acled_api(countries = \"Yemen\",                        start_date = \"2022-01-01\",                        end_date = \"2022-07-30\",                        monadic = F,                        acled_access = TRUE)  # Create vector of actors of interest yemen_actors <- c('Military Forces of Yemen (2016-) Supreme Political Council',                   'Military Forces of Yemen (2012-)')  # Filter to selected actors filtered_df <- filter_actors(df = df_events, actors = yemen_actors, filter_cols = 'all') }"},{"path":"https://acled.github.io/acledR/reference/acled_help.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED's dataset help — acled_help","title":"ACLED's dataset help — acled_help","text":"function allows users consult methodological vignettes different columns ACLED's dataset","code":""},{"path":"https://acled.github.io/acledR/reference/acled_help.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED's dataset help — acled_help","text":"","code":"acled_help(column = NULL)"},{"path":"https://acled.github.io/acledR/reference/acled_help.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ACLED's dataset help — acled_help","text":"column string. string name column consult methodology.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_help.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ACLED's dataset help — acled_help","text":"acledR vignette","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_help.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ACLED's dataset help — acled_help","text":"","code":"if (FALSE) {  ## Get information about the fatalities column acled_help(\"fatalities\") }"},{"path":"https://acled.github.io/acledR/reference/acled_interaction_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED interaction codes — acled_interaction_codes","title":"ACLED interaction codes — acled_interaction_codes","text":"ACLED interaction actor types","code":""},{"path":"https://acled.github.io/acledR/reference/acled_interaction_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED interaction codes — acled_interaction_codes","text":"","code":"acled_interaction_codes"},{"path":"https://acled.github.io/acledR/reference/acled_interaction_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED interaction codes — acled_interaction_codes","text":"data frame: Inter1/Inter2 Actor type Numeric Code Numeric equivalent found inter1 inter2 column.","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_multipliers.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Multipliers — acled_multipliers","title":"ACLED Multipliers — acled_multipliers","text":"dataframe additional information country, purpose estimating events.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_multipliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Multipliers — acled_multipliers","text":"","code":"acled_multipliers"},{"path":"https://acled.github.io/acledR/reference/acled_multipliers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Multipliers — acled_multipliers","text":"data frame: country Country names bin Bin event frequency year Year corresponding bin avg_month_bin Average monthly bin","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_old_deletion_dummy.html","id":null,"dir":"Reference","previous_headings":"","what":"Second dummy data frame of ACLED events emulating an old format, used in acled_deletion_api Vignette — acled_old_deletion_dummy","title":"Second dummy data frame of ACLED events emulating an old format, used in acled_deletion_api Vignette — acled_old_deletion_dummy","text":"Large dataset multiple regions countries, purposefully including deleted/modified events.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_old_deletion_dummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Second dummy data frame of ACLED events emulating an old format, used in acled_deletion_api Vignette — acled_old_deletion_dummy","text":"","code":"acled_old_deletion_dummy"},{"path":"https://acled.github.io/acledR/reference/acled_old_deletion_dummy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Second dummy data frame of ACLED events emulating an old format, used in acled_deletion_api Vignette — acled_old_deletion_dummy","text":"data frame: event_id_cnty unique individual identifier number country acronym (updated annually) event_date day, month year event took place year year event took place time_precision numeric code indicating level certainty date coded event disorder_type Type disorder associated event sub event type event_type type event sub_event_type type sub-event actor1 named actor involved event. Note: Actor 1 Actor 2 imply directionality (e.g. attacker defender) assoc_actor_1 named actor associated identifying actor1 inter1 numeric code indicating type actor1 actor2 named actor involved event. Note: Actor 1 Actor 2 imply directionality (e.g. attacker defender) assoc_actor_2 named actor associated identifying actor1 inter2 numeric code indicating type actor1 interaction numeric code indicating interaction types actor1 actor2 civilian_targeting Column referencing presence civilian targeting iso numeric code individual country region region world event took place country country event took place admin1 largest sub-national administrative region event took place admin2 second largest sub-national administrative region event took place admin3 third largest sub-national administrative region event took place location location event took place latitude latitude location longitude longitude location geo_precision numeric code indicating level certainty location coded event source source event report source_scale scale (local, regional, national, international) source notes short description event fatalities number reported fatalities occurred event tags Tags associated event. timestamp Numeric code time","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_old_dummy.html","id":null,"dir":"Reference","previous_headings":"","what":"A dummy data frame of ACLED events emulating an old format, used in ","title":"A dummy data frame of ACLED events emulating an old format, used in ","text":"Small dataset events Argentina, purposefully including events currently deleted/modified.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_old_dummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A dummy data frame of ACLED events emulating an old format, used in ","text":"","code":"acled_old_dummy"},{"path":"https://acled.github.io/acledR/reference/acled_old_dummy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A dummy data frame of ACLED events emulating an old format, used in ","text":"data frame: event_id_cnty unique individual identifier number country acronym (updated annually) event_date day, month year event took place year year event took place time_precision numeric code indicating level certainty date coded event disorder_type Type disorder associated event sub event type event_type type event sub_event_type type sub-event actor1 named actor involved event. Note: Actor 1 Actor 2 imply directionality (e.g. attacker defender) assoc_actor_1 named actor associated identifying actor1 inter1 numeric code indicating type actor1 actor2 named actor involved event. Note: Actor 1 Actor 2 imply directionality (e.g. attacker defender) assoc_actor_2 named actor associated identifying actor1 inter2 numeric code indicating type actor1 interaction numeric code indicating interaction types actor1 actor2 civilian_targeting Column referencing presence civilian targeting iso numeric code individual country region region world event took place country country event took place admin1 largest sub-national administrative region event took place admin2 second largest sub-national administrative region event took place admin3 third largest sub-national administrative region event took place location location event took place latitude latitude location longitude longitude location geo_precision numeric code indicating level certainty location coded event source source event report source_scale scale (local, regional, national, international) source notes short description event fatalities number reported fatalities occurred event tags Tags associated event. timestamp Numeric code time","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Regions — acled_regions","title":"ACLED Regions — acled_regions","text":"ACLED region names, region numbers, coding start dates","code":""},{"path":"https://acled.github.io/acledR/reference/acled_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Regions — acled_regions","text":"","code":"acled_regions"},{"path":"https://acled.github.io/acledR/reference/acled_regions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Regions — acled_regions","text":"data frame: region Region number region_name Region names first_event_date First date (yyyy-mm-dd) coded ACLED","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_rounding.html","id":null,"dir":"Reference","previous_headings":"","what":"Rounding function — acled_rounding","title":"Rounding function — acled_rounding","text":"function addresses conflicts rounding R, especially trying round .","code":""},{"path":"https://acled.github.io/acledR/reference/acled_rounding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rounding function — acled_rounding","text":"","code":"acled_rounding(num, digits = 0)"},{"path":"https://acled.github.io/acledR/reference/acled_rounding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rounding function — acled_rounding","text":"num int. number trying round. digits int. want round . accepts 0 (whole number), 1 (tenth place), 2 (hundredths), etc.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_rounding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rounding function — acled_rounding","text":"function meant address problem rounding R approach always round even. function meant round things following simple rule. decimal 5+ round , round . 'digits' argument, one can set specificity rounding, 0= whole number, 1 = tenth place, 2=hundreds place, .","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_rounding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rounding function — acled_rounding","text":"","code":"x1 <- 1.569 x2 <- 104.530 x3 <- 54.430 x4 <- 205.49999 acled_rounding(x1) #> [1] 2 acled_rounding(x2) #> [1] 105 acled_rounding(x3) #> [1] 54 acled_rounding(x4) #> [1] 205"},{"path":"https://acled.github.io/acledR/reference/acled_transform_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Change interaction codes from numeric labels to string labels — acled_transform_interaction","title":"Change interaction codes from numeric labels to string labels — acled_transform_interaction","text":"function allows users change numeric interaction codes (.e. 1, 2, 3, etc) string interaction codes (.e. State Forces, Rebel Group, etc.)","code":""},{"path":"https://acled.github.io/acledR/reference/acled_transform_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change interaction codes from numeric labels to string labels — acled_transform_interaction","text":"","code":"acled_transform_interaction(df, only_inters = F)"},{"path":"https://acled.github.io/acledR/reference/acled_transform_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change interaction codes from numeric labels to string labels — acled_transform_interaction","text":"df dataframe. ACLED data including least inter1, inter2 columns. only_inters TRUE, also requires interaction column. only_inters boolean. Option whether include interaction column transformation (TRUE) use inter1 inter2 (FALSE).","code":""},{"path":"https://acled.github.io/acledR/reference/acled_transform_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change interaction codes from numeric labels to string labels — acled_transform_interaction","text":"Returns tibble ACLED events modified inter1, inter2 potentially interaction columns .","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_transform_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change interaction codes from numeric labels to string labels — acled_transform_interaction","text":"","code":"if (FALSE) {  # Load data frame argen_acled <- acled_api(email = jane.doe.email, key = jane.doe.key,                         countries = \"Argentina\", start_date = \"2022-01-01\", end_date=\"2022-02-01\",                         acled_access = FALSE)  # Transform the interactions argen_acled_transformed <- acled_transformation_interaction(argen_acled, only_inters = F) }"},{"path":"https://acled.github.io/acledR/reference/acled_transform_longer.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform ACLED data from wide to long — acled_transform_longer","title":"Transform ACLED data from wide to long — acled_transform_longer","text":"Function convert ACLED's API calls (dyadic) desired monadic forms.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_transform_longer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform ACLED data from wide to long — acled_transform_longer","text":"","code":"acled_transform_longer(data, type = \"full_actors\")"},{"path":"https://acled.github.io/acledR/reference/acled_transform_longer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform ACLED data from wide to long — acled_transform_longer","text":"data, Dataframe tibble containing dataset. type, character string. One five types: full_actors, main_actors, assoc_actors, source, . full_actors: actor associated actor columns main_actors: Actor 1 Actor 2 columns assoc_actors: associated actor columns source: source column becomes monadic","code":""},{"path":"https://acled.github.io/acledR/reference/acled_transform_longer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform ACLED data from wide to long — acled_transform_longer","text":"tibble data transformed long form.","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_transform_longer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform ACLED data from wide to long — acled_transform_longer","text":"","code":"if (FALSE) { #argen_acled <- acled_api(countries = \"Argentina\",start_date = \"2022-01-01\", #                          end_date=\"2022-02-01\", acled_access = T, prompt = F)  #argen_acled_long_actors <- acled_transform_wide_to_long(argen_acled, #                                            type = \"full_actor\") # Transforming the data  #nrow(argen_acled_long_actors) # Number of rows in the dataset #[1] 263 # Long form  #nrow(argen_acled) ) # Number of rows in the dataset #[1] 145 # Wide form }"},{"path":"https://acled.github.io/acledR/reference/acled_transform_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse Transform ACLED Data from Long to Wide — acled_transform_wider","title":"Reverse Transform ACLED Data from Long to Wide — acled_transform_wider","text":"Function convert ACLED's API calls (monadic) back original dyadic forms.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_transform_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse Transform ACLED Data from Long to Wide — acled_transform_wider","text":"","code":"acled_transform_wider(data, type = \"full_actors\")"},{"path":"https://acled.github.io/acledR/reference/acled_transform_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse Transform ACLED Data from Long to Wide — acled_transform_wider","text":"data, dataframe tibble containing dataset. type, character string. One five types: full_actors, main_actors, assoc_actors, source, . full_actors: actor associated actor columns main_actors: Actor 1 Actor 2 columns assoc_actors: associated actor columns source: source column becomes dyadic api_monadic: Use option data output API's monadic option.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_transform_wider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse Transform ACLED Data from Long to Wide — acled_transform_wider","text":"tibble data transformed back wide form.","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_transform_wider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse Transform ACLED Data from Long to Wide — acled_transform_wider","text":"","code":"if (FALSE) { #argen_acled <- acled_api(countries = \"Argentina\",start_date = \"2022-01-01\", #                          end_date=\"2022-02-01\", acled_access = T, prompt = F) #argen_acled_long_actors <- acled_transform_longer(argen_acled, #                        type = \"full_actor\") # Transforming the data to long form  #argen_acled_wide <- acled_transform_wider(argen_acled_long_actors, #                        type = \"full_actor\") # Transforming the data back to wide form  #nrow(argen_acled_wide) # Number of rows in the dataset #[1] 145 # Wide form  #nrow(argen_acled_long_actors) # Number of rows in the dataset #[1] 263 # Long form }"},{"path":"https://acled.github.io/acledR/reference/acled_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Updating your ACLED dataset — acled_update","title":"Updating your ACLED dataset — acled_update","text":"function meant help keep dataset updated, automatically checking new modified events, well deleted events (deleted = TRUE). Note: function makes new api calls gather new modified events. See vignettes : https://acled.github.io/acledR/articles/acled_deletions_api.html","code":""},{"path":"https://acled.github.io/acledR/reference/acled_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updating your ACLED dataset — acled_update","text":"","code":"acled_update(   df,   start_date = min(df$event_date),   end_date = max(df$event_date),   additional_countries = \"current additional_countries\",   regions = NULL,   event_types = NULL,   acled_access = TRUE,   email = NULL,   key = NULL,   deleted = TRUE,   prompts = T )"},{"path":"https://acled.github.io/acledR/reference/acled_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updating your ACLED dataset — acled_update","text":"df dataframe update, structure ACLED's dyadic dataframe (.e. result acled_api()) start_date first date events want update .. celling floor event_date, timestamp. end_date last date events want update . celling floor event_date, timestamp. additional_countries string. Additional additional_countries update dataset. defaults “current additional_countries”, includes additional_countries inside dataset. regions string. regions like events dataset updated. event_types string. event types like events dataset updated. acled_access logical. already used acled_acess(), can set option TRUE (default) avoid input email access key. email character string. Email associated ACLED account registered https://developer.acleddata.com. key character string. Access key associated ACLED account registered https://developer.acleddata.com. deleted logical. TRUE (default), function also remove deleted events using acled_deletions_api(). prompts logical. TRUE (default), users receive interactive prompt providing information call (additional_countries requested, number country-days, number API calls required) asking want proceed call. FALSE, call continues without warning, call split returns message specifying many calls made.","code":""},{"path":"https://acled.github.io/acledR/reference/acled_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updating your ACLED dataset — acled_update","text":"Tibble updated ACLED data newer timestamp.","code":""},{"path":[]},{"path":"https://acled.github.io/acledR/reference/acled_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updating your ACLED dataset — acled_update","text":"","code":"# Updating dataset to include newer data from Argentina  acledR::acled_access(email = \"acledexamples@gmail.com\", key = \"M3PWwg3DIdhHMuDiilp5\") #> Success! Credentials authorized  new_argen_dataset <- acled_update(acledR::acled_old_dummy,                                   additional_countries = \"Argentina\",                                   acled_access = TRUE,                                   prompts = FALSE) #> Requesting data for 1 countries. Accounting for the requested time period and ACLED coverage dates, this request includes approximately 350 events. #> Processing API request #> Extracting content from API request #> Dataset updated.  #>  Old number of events: 326.  #>  New events: 1.  #>  Deleted events: 0.  #>  Total new & modified events: 64"},{"path":"https://acled.github.io/acledR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://acled.github.io/acledR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://acled.github.io/acledR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://acled.github.io/acledR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""}]
